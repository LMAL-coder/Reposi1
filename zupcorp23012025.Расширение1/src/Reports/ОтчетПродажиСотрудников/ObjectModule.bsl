Функция СведенияОВнешнейОбработке() Экспорт
    
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
    ПараметрыРегистрации.Версия = "2024.12.12";
    ПараметрыРегистрации.БезопасныйРежим = Ложь;
    
    НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
    НоваяКоманда.Представление = "Отчет по продажам сотрудников";
    НоваяКоманда.Идентификатор = "ЗГ_ОтчетПоПродажамСотрудников";	
    НоваяКоманда.Использование=ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    НоваяКоманда.ПоказыватьОповещение = Истина;
    
    Возврат ПараметрыРегистрации;
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
	Если ПараметрПериод.Использование Тогда
		Период1 = ПараметрПериод.Значение;
	Иначе
		Период1 = Дата(2024,01,01,00,00,00);
	КонецЕсли;
	ДатаНачала=Период1.ДатаНачала;
	ДатаОкончания=Период1.ДатаОкончания;  
	//ДатаНачала=Дата(2024,11,01);
	//ДатаОкончания=Дата(2024,12,01);
	ТаблицаИтог = Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить("АП", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаИтог.Колонки.Добавить("ФИО", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаИтог.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаИтог.Колонки.Добавить("СуммаВсего", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИтог.Колонки.Добавить("СуммаЗМЗ", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
    ТаблицаИтог.Колонки.Добавить("КолЧасов", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИтог.Колонки.Добавить("СтажВнутренний", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИтог.Колонки.Добавить("Стаж", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	////Получаем данные из ЕРП
	ТаблицаПродажи=ПолучитьВсеДанныеПродажИзЕРП(ДатаНачала,ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продажи.КемПродано КАК КемПродано,
	|	Продажи.КоличествоОборот КАК КоличествоОборот,
	|	Продажи.СуммаОборот КАК СуммаОборот,
	|	Продажи.КоличествоЗМЗ КАК КоличествоЗМЗ,
	|	Продажи.СуммаЗМЗ КАК СуммаЗМЗ
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	&Продажи КАК Продажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Значение КАК Код
	|ПОМЕСТИТЬ ВТ_ФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Свойство = &Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФизЛица.Ссылка КАК Ссылка,
	|	ВТ_Продажи.КемПродано КАК КемПродано,
	|	ВТ_Продажи.КоличествоОборот КАК КоличествоОборот,
	|	ВТ_Продажи.СуммаОборот КАК СуммаОборот,
	|	ВТ_Продажи.КоличествоЗМЗ КАК КоличествоЗМЗ,
	|	ВТ_Продажи.СуммаЗМЗ КАК СуммаЗМЗ
	|ИЗ
	|	ВТ_Продажи КАК ВТ_Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
	|		ПО ВТ_Продажи.КемПродано = ВТ_ФизЛица.Код";
	
	Запрос.УстановитьПараметр("Продажи", ТаблицаПродажи);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("КодСотрудника (Физические лица)"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивФизЛица=Новый Массив;
		МассивФизЛица.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КадровыеДанные = "Сотрудник,ФизическоеЛицо,Подразделение,Должность,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ВидЗанятости,ДатаПриема,ДатаУвольнения";
		//КадровыеДанныеФиз="ОбщийСтажРазмерДней,ОбщийСтажЛет";
		ОсновныеСотрудникиФизЛица=КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(МассивФизЛица, Истина, , ДатаОкончания);
		МассивСотрудников1=ОсновныеСотрудникиФизЛица.ВыгрузитьКолонку("Сотрудник");
		//МассивСотрудников=Новый Массив;
		//МассивСотрудников.Добавить(Справочники.Сотрудники.НайтиПоНаименованию("Авдеева Елена Алексеевна"));
		//Получаем количетво отработанных часов
		Запрос2 = Новый Запрос;
		Запрос2.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.Сотрудник.ФизическоеЛицо КАК СотрудникФизическоеЛицо,
		|	СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.ЧасыОборот) КАК ЧасыОборот
		|ИЗ
		|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			Сотрудник.ФизическоеЛицо=&ФизическоеЛицо
		|				И ВидУчетаВремени В (&ВидУчетаВремени)) КАК ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.Сотрудник.ФизическоеЛицо";
		
		ВидУчетаВремени=Новый Массив;
		ВидУчетаВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.Явка);
		ВидУчетаВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы);
		
		Запрос2.УстановитьПараметр("ВидУчетаВремени", ВидУчетаВремени);
		Запрос2.УстановитьПараметр("ФизическоеЛицо",ВыборкаДетальныеЗаписи.Ссылка);
		Запрос2.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос2.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		
		РезультатЗапроса2 = Запрос2.Выполнить();
		
		ВыборкаДетальныеЗаписи2 = РезультатЗапроса2.Выбрать();
		Часы=0;
		Пока ВыборкаДетальныеЗаписи2.Следующий() Цикл
			Часы=ВыборкаДетальныеЗаписи2.ЧасыОборот;	
		КонецЦикла;
	
		//кадровые данные:  должность и подразделение
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников1, КадровыеДанные, ДатаОкончания);
		ОсновнойСотрудник=Справочники.Сотрудники.ПустаяСсылка();
		Должность=Справочники.Должности.ПустаяСсылка();
		Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ДатаПриема=Дата(0001,01,01);
		Для каждого сотр1 ИЗ КадровыеДанныеСотрудников Цикл
			Если Сотр1.ВидЗанятости=Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				ОсновнойСотрудник=Сотр1.Сотрудник;
				Должность=Сотр1.Должность;
				Подразделение=Сотр1.Подразделение;
				ДатаПриема=Сотр1.ДатаПриема;
				Прервать;
			КонецЕсли;
			Если Сотр1.ВидЗанятости=Перечисления.ВидыЗанятости.Совместительство Тогда
				ОсновнойСотрудник=Сотр1.Сотрудник;
				Должность=Сотр1.Должность;
				Подразделение=Сотр1.Подразделение;
			КонецЕсли;
		КонецЦикла;
		
		// расчет стажа
		Если ЗначениеЗаполнено(ОсновнойСотрудник) Тогда	
			// расчет стажа
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			// сначала в таблицу ВТИсходныеДанные поместить поля Дата, ФизическоеЛицо, Сотрудник, ВидСтажа
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			МассивСотрудников=Новый Массив;
			//МассивСотрудников.Добавить(Справочники.Сотрудники.НайтиПоНаименованию("Рубина Елена Александровна"));
			МассивСотрудников.Добавить(ОсновнойСотрудник);
			
			Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
			Запрос.УстановитьПараметр("Период", ДатаОкончания);
			//Запрос.УстановитьПараметр("СтажОбщий", Справочники.ВидыСтажа.НайтиПоРеквизиту("КатегорияСтажа", Перечисления.КатегорииСтажа.Общий));
			Запрос.УстановитьПараметр("СтажОбщий", Справочники.ВидыСтажа.НайтиПоНаименованию("Внутренний стаж"));
			Запрос.Текст ="ВЫБРАТЬ
			|    Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|    Сотрудники.Ссылка КАК Сотрудник,
			|    &Период КАК Дата,
			|    &СтажОбщий КАК ВидСтажа
			|ПОМЕСТИТЬ ВТИсходныеДанные
			|ИЗ
			|    Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|    Сотрудники.Ссылка В(&МассивСотрудников)";
			Запрос.Выполнить();
			
			// расчет стажа указанного вида
			КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(Запрос.МенеджерВременныхТаблиц);
			
			// выбрать стаж в месяцах из полученных данных
			Запрос.Текст = "
			|ВЫБРАТЬ
			|   ВТСтажиСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|   ВТСтажиСотрудников.Дата КАК Период,
			|   ВТСтажиСотрудников.ВидСтажа.КатегорияСтажа КАК КатегорияСтажа,
			|   ВТСтажиСотрудников.РазмерМесяцев КАК РазмерМесяцев
			|ИЗ ВТСтажиСотрудников";
			
			РезультатЗапроса1=Запрос.Выполнить();
			ВыборкаДетальныеЗаписи1 = РезультатЗапроса1.Выбрать();
	        Стаж=0;
			Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
				Стаж=ОКР(ВыборкаДетальныеЗаписи1.РазмерМесяцев/12,2);	
			КонецЦикла;
            //Итоговые данные
	        СтрИтог=ТаблицаИтог.Добавить();
			СтрИтог.АП=Подразделение;
			СтрИтог.ФИО=ВыборкаДетальныеЗаписи.Ссылка;
			СтрИтог.Должность=Должность;
			СтрИтог.СуммаВсего=ВыборкаДетальныеЗаписи.СуммаОборот;
			СтрИтог.СуммаЗМЗ=ВыборкаДетальныеЗаписи.СуммаЗМЗ;
			СтрИтог.КолЧасов=Часы;
			СтрИтог.СтажВнутренний=Стаж;
			Если ДатаПриема>Дата(1900,01,01) Тогда
				СтрИтог.Стаж=ОКР((ДатаОкончания-ДатаПриема)/(3600*24*365),2);
			Иначе
				СтрИтог.Стаж=0;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	//НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ВнешнийИД =  Новый Структура("ТаблицаИтог", ТаблицаИтог);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийИД , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода.
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

КонецПроцедуры

//Получает из ЕРП сумму продаж и данные ЗМЗ по все сотрудникам за пероид. Нужно для отчета
Функция ПолучитьВсеДанныеПродажИзЕРП(ДатаНачала, ДатаОкончания) Экспорт
	
	ТаблицаИтог = Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить("КемПродано", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаИтог.Колонки.Добавить("КоличествоОборот", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИтог.Колонки.Добавить("СуммаОборот", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИтог.Колонки.Добавить("КоличествоЗМЗ", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИтог.Колонки.Добавить("СуммаЗМЗ", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	//КемПродано,КоличествоОборот,СуммаОборот,КоличествоЗМЗ,СуммаЗМЗ
	
	
	//Получаем данные из ЕРП
	ПараметрыПодключения = ЗГ_ПроцедурыИФункцииСервер.ПолучитьПараметрыПодключения("ERP");
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);
	
	ЗапросHTTP = Новый HTTPЗапрос("/erp/hs/api/test");
	ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка при подключении к базе ЕРП с параметрами: сервер <%1>, пользователь <%2>", ПараметрыПодключения.Сервер, ПараметрыПодключения.Пользователь);
	КонецЕсли;
	
	КлючЗапроса = Строка(Новый УникальныйИдентификатор);
	
	НазначениеЗапроса = "HTTP КОРП: Продажи ЗМЗ по всем сотрудникам";
	
	ПараметрыЗапроса = Новый Структура();	
	ПараметрыЗапроса.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания",ДатаОкончания);
		
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("/erp/hs/api/query/%1?Назначение=%2", КлючЗапроса, НазначениеЗапроса));
	ЗапросHTTP.УстановитьТелоИзСтроки(ПолучитьПараметрыЗапросаСтрокойJSON(ПараметрыЗапроса));
	ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния = 400 Тогда
		ВызватьИсключение СтрШаблон("Запрос в ЕРП с назначением <%1> завершился с ошибкой. %2", НазначениеЗапроса, ОтветHTTP.ПолучитьТелоКакСтроку());
	ИначеЕсли ОтветHTTP.КодСостояния = 404 Тогда
		КоличествоЗаписей = 0;
	ИначеЕсли ОтветHTTP.КодСостояния = 200 Тогда	
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
		Данные = ПрочитатьJSON(Чтение);
		КоличествоЗаписей = Данные.Количество;
	КонецЕсли;
	Если КоличествоЗаписей <> 0 Тогда
		
		Диапазон=СтрШаблон("1-%1", Формат(КоличествоЗаписей, "ЧГ=0"));
		ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("/erp/hs/api/query/%1?Диапазон=%2", КлючЗапроса, Диапазон));
		ОтветHTTP = Соединение.Получить(ЗапросHTTP);
		Если ОтветHTTP.КодСостояния <> 200 Тогда
			ВызватьИсключение СтрШаблон("Получение записей из ЕРП по запросу с назначением <%1> в диапазоне <%2> завершилось с ошибкой. %3", НазначениеЗапроса, Диапазон, ОтветHTTP.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
		Данные1 = ПрочитатьJSON(Чтение); 
		//КемПродано,КоличествоОборот,СуммаОборот,КоличествоЗМЗ,СуммаЗМЗ
		Для каждого эл Из Данные1 Цикл
			Строка=ТаблицаИтог.Добавить();
			Строка.КемПродано=эл.КемПродано;
			Строка.КоличествоОборот=эл.КоличествоОборот;
			Строка.СуммаОборот=эл.СуммаОборот;
			Строка.КоличествоЗМЗ=эл.КоличествоЗМЗ;
			Строка.СуммаЗМЗ=эл.СуммаЗМЗ;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаИтог;
	
КонецФункции

Функция ПолучитьПараметрыЗапросаСтрокойJSON(ПараметрыЗапроса)
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,,Истина,Истина,Истина,Истина,Истина));
	Запись.ПроверятьСтруктуру = Ложь;
	ЗаписатьJSON(Запись, ПараметрыЗапроса);
	
	Возврат Запись.Закрыть();
	
КонецФункции
