Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
	Если ПараметрПериод.Использование Тогда
		Период1 = ПараметрПериод.Значение;
	Иначе
		Период1 = Дата(2024,01,01,00,00,00);
	КонецЕсли;
	//
	//ПараметрВышестоящееПодразделение = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВышестоящееПодразделение");
	//Если ПараметрВышестоящееПодразделение.Использование Тогда
	//	ВышестоящееПодразделение = ПараметрВышестоящееПодразделение.Значение;
	//Иначе
	//	ВышестоящееПодразделение = Неопределено;
	//КонецЕсли;
	ДатаНачала=Период1.ДатаНачала;
	ДатаОкончания=Период1.ДатаОкончания;
	//ДатаОкончания=Дата(2024,09,30,23,59,59);
	
	//Нужно получить сколько часов распределено в ЗУП
	ПараметрыПодключения = ЗГ_ПроцедурыИФункцииСервер.ПолучитьПараметрыПодключения("ЗУП ПРОФ 3.1");
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключения.Сервер) Тогда
		ВызватьИсключение "Не найдены параметры подключения к базе «ЗУП ПРОФ»";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);
	ЗапросHTTP = Новый HTTPЗапрос("/"+ПараметрыПодключения.ПубликацияНаВебСервере+"/hs/api/test");
	ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ВызватьИсключение "Произошла ошибка при подключении к базе «ЗУП ПРОФ» ";
	КонецЕсли;
	//Организация,ИНН,Код,ВидЗанятости,ДолжностьПоШтатномуРасписанию,ВидУчетаВремени,ДниОборот,ЧасыОборот
	ТаблицаТабельЗУП = Новый ТаблицаЗначений;
	ТаблицаТабельЗУП.Колонки.Добавить("Организация", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаТабельЗУП.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(20)));
	ТаблицаТабельЗУП.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(20)));
	//ТаблицаТабель.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаТабельЗУП.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаТабельЗУП.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаТабельЗУП.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаТабельЗУП.Колонки.Добавить("ДниОборот", Новый ОписаниеТипов("Число"));
	ТаблицаТабельЗУП.Колонки.Добавить("ЧасыОборот", Новый ОписаниеТипов("Число"));
	
	СотрудникИНН="11111";
	Запрос = Новый HTTPЗапрос(СтрШаблон("/"+ПараметрыПодключения.ПубликацияНаВебСервере+"/hs/api/tabellzp/%1?startdate=%2&enddate=%3",СотрудникИНН,Формат(ДатаНачала, "ДФ=yyyyMMdd"),Формат(ДатаОкончания, "ДФ=yyyyMMdd")));
	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ДанныеТабеля = ПрочитатьJSON(Чтение);
		ТаблицаТабельЗУП.Очистить();
		Для Каждого Стр Из ДанныеТабеля Цикл
			Нов = ТаблицаТабельЗУП.Добавить();
			//Нов.Период=Дата(СтрЗаменить(Лев(Стр.Период,10),"-",""));
			Нов.Организация=Стр.Организация;
			Нов.ИНН=Стр.ИНН;
			Нов.Код=Стр.Код;
			Нов.ВидЗанятости=Стр.ВидЗанятости;
			Нов.ДолжностьПоШтатномуРасписанию=Стр.ДолжностьПоШтатномуРасписанию;
			Нов.ВидУчетаВремени=Стр.ВидУчетаВремени;
			Нов.ДниОборот=Стр.ДниОборот;
			Нов.ЧасыОборот=Стр.ЧасыОборот;
			
		КонецЦикла
	КонецЕсли;
	
	//Получаем данные табеля из Корп
	МВТ = Новый МенеджерВременныхТаблиц;
	ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.НачалоПериода = ДатаНачала;
	ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.ОкончаниеПериода = ДатаОкончания;
	ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.КадровыеДанные = "Сотрудник, ФизическоеЛицо, ИНН, Подразделение, Должность, ВидЗанятости";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МВТ , Истина, ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
//Запрос.Текст = 
	
	
	ВидыВремени=Новый Массив;
	ВидыВремени.Добавить("Явка");
	ВидыВремени.Добавить("Ночные часы");
	//ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
	//ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы"));
	
	Неявки=Новый Массив;
	Неявки.Добавить("Отпуск");
	Неявки.Добавить("Больничный");
	Неявки.Добавить("Отпуск неоплачиваемый с разрешения работодателя");
	Неявки.Добавить("Отпуск по уходу за ребенком");
	Неявки.Добавить("Дополнительные выходные дни (неоплачиваемые)");
	Неявки.Добавить("Отпуск по беременности и родам");
	
	
	Запрос.УстановитьПараметр("ВидыУчетаВремени", ВидыВремени);
	Запрос.УстановитьПараметр("Неявки", Неявки);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ВТ_ЗУП", ТаблицаТабельЗУП);
	Запрос.УстановитьПараметр("ВидЗанятости",Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ЗУП.Организация КАК Организация,
	|	ВТ_ЗУП.ИНН КАК ИНН,
	|	ВТ_ЗУП.Код КАК Код,
	|	ВТ_ЗУП.ВидЗанятости КАК ВидЗанятости,
	|	ВТ_ЗУП.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	ВТ_ЗУП.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВТ_ЗУП.ДниОборот КАК ДниОборот,
	|	ВТ_ЗУП.ЧасыОборот КАК ЧасыОборот
	|ПОМЕСТИТЬ ВТ_ЗУП
	|ИЗ
	|	&ВТ_ЗУП КАК ВТ_ЗУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗУП.ИНН КАК ИНН,
	|	СУММА(ВТ_ЗУП.ДниОборот) КАК ДниОборот,
	|	СУММА(ВТ_ЗУП.ЧасыОборот) КАК ЧасыОборот
	//1|ПОМЕСТИТЬ ВТ_ЗУПРабота
	|ИЗ
	|	ВТ_ЗУП КАК ВТ_ЗУП
	|ГДЕ
	|	ВТ_ЗУП.ВидУчетаВремени В(&ВидыУчетаВремени)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗУП.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗУП.ИНН КАК ИНН,
	|	ВТ_ЗУП.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СУММА(ВТ_ЗУП.ДниОборот) КАК ДниОборот,
	|	СУММА(ВТ_ЗУП.ЧасыОборот) КАК ЧасыОборот
	//2|ПОМЕСТИТЬ ВТ_ЗУПНеявки
	|ИЗ
	|	ВТ_ЗУП КАК ВТ_ЗУП
	|ГДЕ
	|	ВТ_ЗУП.ВидУчетаВремени В(&Неявки)
	|
	|СГРУППИРОВАТЬ ПО 
	|	ВТ_ЗУП.ИНН,
	|	ВТ_ЗУП.ВидУчетаВремени
	|Упорядочить ПО ВТ_ЗУП.ИНН,ВТ_ЗУП.ВидУчетаВремени 
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ИНН
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВТСотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСотрудникиОрганизации.ФизическоеЛицо.Наименование КАК ФизическоеЛицоНаименование,
	|	ВТСотрудникиОрганизации.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТСотрудникиОрганизации1
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|СГРУППИРОВАТЬ ПО
	|	ВТСотрудникиОрганизации.ФизическоеЛицо,
	|	ВТСотрудникиОрганизации.ФизическоеЛицо.Наименование,
	|	ВТСотрудникиОрганизации.ИНН
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВТСотрудникиОрганизации1.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСотрудникиОрганизации1.ФизическоеЛицоНаименование КАК ФизическоеЛицоНаименование,
	|	ВТСотрудникиОрганизации1.ИНН КАК ИНН,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.ДниОборот КАК ДниОборот,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.ЧасыОборот КАК ЧасыОборот
	|ПОМЕСТИТЬ ВТ_Корп1
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации1 КАК ВТСотрудникиОрганизации1
	|		ПО ДанныеТабельногоУчетаРабочегоВремениСотрудниковОбороты.Сотрудник.ФизическоеЛицо = ВТСотрудникиОрганизации1.ФизическоеЛицо
	//|Упорядочить по ВТСотрудникиОрганизации.ФизическоеЛицо.Наименование
	|;
	//Рез=Запрос.Выполнить().Выгрузить();
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВТ_Корп1.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Корп1.ФизическоеЛицоНаименование КАК ФизическоеЛицоНаименование,
	|	ВТ_Корп1.ИНН КАК ИНН,
	|	ВТ_Корп1.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СУММА(ВТ_Корп1.ДниОборот) КАК ДниОборот,
	|	СУММА(ВТ_Корп1.ЧасыОборот) КАК ЧасыОборот
	|ПОМЕСТИТЬ ВТ_Корп
	|ИЗ
	|	ВТ_Корп1 КАК ВТ_Корп1
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Корп1.ФизическоеЛицо,
	|	ВТ_Корп1.ФизическоеЛицоНаименование,
	|	ВТ_Корп1.ИНН,
	|	ВТ_Корп1.ВидУчетаВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Корп.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Корп.ИНН КАК ИНН,
	|	СУММА(ВТ_Корп.ДниОборот) КАК ДниОборот,
	|	СУММА(ВТ_Корп.ЧасыОборот) КАК ЧасыОборот
	//6 |ПОМЕСТИТЬ ВТ_КорпРабота
	|ИЗ
	|	ВТ_Корп КАК ВТ_Корп
	|ГДЕ
	|	ВТ_Корп.ВидУчетаВремени.Наименование В(&ВидыУчетаВремени)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Корп.ФизическоеЛицо,
	|	ВТ_Корп.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Корп.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Корп.ИНН КАК ИНН,
	|	ВТ_Корп.ВидУчетаВремени.Наименование КАК ВидУчетаВремени,
	|	СУММА(ВТ_Корп.ДниОборот) КАК ДниОборот,
	|	СУММА(ВТ_Корп.ЧасыОборот) КАК ЧасыОборот
	//7 |ПОМЕСТИТЬ ВТ_КорпНеявки
	|ИЗ
	|	ВТ_Корп КАК ВТ_Корп
	|ГДЕ
	|	ВТ_Корп.ВидУчетаВремени.Наименование В(&Неявки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Корп.ФизическоеЛицо,
	|	ВТ_Корп.ИНН,
	|	ВТ_Корп.ВидУчетаВремени
	|Упорядочить По ВТ_Корп.ИНН,ВТ_Корп.ВидУчетаВремени.Наименование 
	|;
	|///////////////////////
	|ВЫБРАТЬ
	|	ВТСотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСотрудникиОрганизации.ИНН КАК ИНН,
	|	ВТСотрудникиОрганизации.Подразделение КАК ОсновнаяАптека,
	|	ВТСотрудникиОрганизации.Должность КАК Должность
	|
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|ГДЕ
	|	ВТСотрудникиОрганизации.ВидЗанятости=&ВидЗанятости;
	|";
	
	РезультатЗапросаМассив = Запрос.ВыполнитьПакет();
	ТабЗУПРабота=РезультатЗапросаМассив[1].Выгрузить();
	ТабЗУПНеявка=РезультатЗапросаМассив[2].Выгрузить();
	ТабКорпРабота=РезультатЗапросаМассив[6].Выгрузить();
	ТабКорпНеявка=РезультатЗапросаМассив[7].Выгрузить();
	ТабНачисления=РезультатЗапросаМассив[8].Выгрузить();
	ТаблицаИтог=Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаИтог.Колонки.Добавить("ОсновнаяАптека", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаИтог.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаИтог.Колонки.Добавить("ДниУУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("ЧасыУУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("НеявкаУУ", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаИтог.Колонки.Добавить("ДниНеявкиУУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("ЧасыНеявкиУУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("ДниЮУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("ЧасыЮУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("НеявкаЮУ", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаИтог.Колонки.Добавить("ДниНеявкиЮУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("ЧасыНеявкиЮУ", Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число"));
	Для каждого СтрокаСотрКорп Из ТабКорпРабота Цикл
		СтрокаСотрЗУП=ТабЗУПРабота.Найти(СтрокаСотрКорп.ИНН,"ИНН");
		СтрокаНачисления=ТабНачисления.Найти(СтрокаСотрКорп.ИНН,"ИНН");
		
		СтрТабИтог=ТаблицаИтог.Добавить();
		СтрТабИтог.ФизическоеЛицо=СтрокаСотрКорп.ФизическоеЛицо.Наименование;
		Если ЗначениеЗаполнено(СтрокаНачисления)  Тогда 
			СтрТабИтог.ОсновнаяАптека=СтрокаНачисления.ОсновнаяАптека;
			СтрТабИтог.Должность=СтрокаНачисления.Должность;
		КонецЕсли;
		СтрТабИтог.ДниУУ= СтрокаСотрКорп.ДниОборот;
		СтрТабИтог.ЧасыУУ=СтрокаСотрКорп.ЧасыОборот;
		Если ЗНачениеЗаполнено(СтрокаСотрЗУП) Тогда
			СтрТабИтог.ДниЮУ= СтрокаСотрЗУП.ДниОборот;
			СтрТабИтог.ЧасыЮУ=СтрокаСотрЗУП.ЧасыОборот; 
		КонецЕсли;
		СтрТабИтог.Дельта=СтрТабИтог.ЧасыУУ-?(ЗначениеЗаполнено(СтрТабИтог.ЧасыЮУ),СтрТабИтог.ЧасыЮУ,0);
		Структ1=Новый Структура;
		Структ1.Вставить("ИНН",СтрокаСотрКорп.ИНН);
		СтрокиНеявкаКорп=ТабКорпНеявка.НайтиСтроки(Структ1);
		СтрокиНеявкаЗУП=ТабЗУПНеявка.НайтиСтроки(Структ1);
		КолНеявКорп=СтрокиНеявкаКорп.Количество();
		КолНеявЗУП=СтрокиНеявкаЗУП.Количество();
		n=КолНеявКорп;
		Если n<КолНеявЗУП Тогда
			n=КолНеявЗУП;
		КонецЕсли;
		Для i=0 По n-1 Цикл
			
			Если i<КолНеявКорп Тогда
				СтрТабИтог.НеявкаУУ=СтрокиНеявкаКорп[i].ВидУчетаВремени;
				СтрТабИтог.ДниНеявкиУУ=СтрокиНеявкаКорп[i].ДниОборот;
				СтрТабИтог.ЧасыНеявкиУУ=СтрокиНеявкаКорп[i].ЧасыОборот;
			КонецЕсли;
			Если i<КолНеявЗУП Тогда
				СтрТабИтог.НеявкаЮУ=СтрокиНеявкаЗУП[i].ВидУчетаВремени;
				СтрТабИтог.ДниНеявкиЮУ=СтрокиНеявкаЗУП[i].ДниОборот;
				СтрТабИтог.ЧасыНеявкиЮУ=СтрокиНеявкаЗУП[i].ЧасыОборот;
			КонецЕсли;
			Если i<n-1 Тогда
				СтрТабИтог=ТаблицаИтог.Добавить();
				СтрТабИтог.ФизическоеЛицо=СтрокаСотрКорп.ФизическоеЛицо.Наименование;
				Если ЗначениеЗаполнено(СтрокаНачисления)  Тогда 
					СтрТабИтог.ОсновнаяАптека=СтрокаНачисления.ОсновнаяАптека;
					СтрТабИтог.Должность=СтрокаНачисления.Должность;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ВнешнийИД =  Новый Структура("ТаблицаИтог", ТаблицаИтог);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийИД , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода.
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
КонецПроцедуры