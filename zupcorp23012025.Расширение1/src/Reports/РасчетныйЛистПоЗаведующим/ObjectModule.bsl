
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
	Если ПараметрПериод.Использование Тогда
		Период1 = ПараметрПериод.Значение;
	Иначе
		Период1 = Дата(2024,01,01,00,00,00);
	КонецЕсли; 
	//ПараметрПодразделение = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Подразделение");
	//Если ПараметрПодразделение.Использование Тогда
	//	Подразделение = ПараметрПодразделение.Значение;
	//Иначе
	//	Подразделение =Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	//КонецЕсли;
	
	//Отображаем только данные по подразоделению в котором работает текущий пользователь_н
	ОграничитьДоступ=Истина;
	Если РольДоступна("ЗГ_НачислениеЗП") или РольДоступна("АдминистраторСистемы") или РольДоступна("ПолныеПрава") Тогда
		ОграничитьДоступ=Ложь;
	КонецЕсли;
	Если ОграничитьДоступ Тогда	
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		ФизическоеЛицо=ТекПользователь.ФизическоеЛицо;
		////ФизическоеЛицо=Справочники.ФизическиеЛица.НайтиПоНаименованию("Прудских Юлия Игоревна");
		//Запрос3 = Новый Запрос;
		//Запрос3.Текст = 
		//"ВЫБРАТЬ 
		//|	Сотрудники.Ссылка КАК Ссылка
		//|ИЗ
		//|	Справочник.Сотрудники КАК Сотрудники
		//|ГДЕ
		//|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
		//|	И НЕ Сотрудники.ПометкаУдаления";
		//
		//Запрос3.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		//СотрудникиМассив=Запрос3.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		//Таблица1=КадровыйУчет.КадровыеДанныеСотрудников(Истина,СотрудникиМассив,"ФизическоеЛицо,Сотрудник,Подразделение");
		//Таблица1.Свернуть("Подразделение");
		////МассивПодразделений=Таблица1.ВыгрузитьКолонку("Подразделение");
		//ПараметрыПоиска=Новый Структура;
		//ПараметрыПоиска.Вставить("Подразделение",Подразделение);
		//МассивПодразделений=Таблица1.НайтиСтроки(ПараметрыПоиска);
		//Если МассивПодразделений.Количество()=0 Тогда
		//	Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка(); 
		//	Сообщить("По данному подразделению запрещено делать отчет, можно только по подразделению в котором работает сотрудник");
		//	
		//КонецЕсли;
		////Запрос.УстановитьПараметр("ДоступныеПодразделения",МассивПодразделений);
	КонецЕсли;
	//текущий пользователь_К
	
	
	//
	//ПараметрВышестоящееПодразделение = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВышестоящееПодразделение");
	//Если ПараметрВышестоящееПодразделение.Использование Тогда
	//	ВышестоящееПодразделение = ПараметрВышестоящееПодразделение.Значение;
	//Иначе
	//	ВышестоящееПодразделение = Неопределено;
	//КонецЕсли;
	ДатаНачала=Период1.ДатаНачала;
	ДатаОкончания=Период1.ДатаОкончания;
	ПараметрыПодключения = ЗГ_ПроцедурыИФункцииСервер.ПолучитьПараметрыПодключения("ЗУП ПРОФ 3.1");
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключения.Сервер) Тогда
		ВызватьИсключение "Не найдены параметры подключения к базе «ЗУП ПРОФ»";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);
	ЗапросHTTP = Новый HTTPЗапрос("/"+ПараметрыПодключения.ПубликацияНаВебСервере+"/hs/api/test");
	ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ВызватьИсключение "Произошла ошибка при подключении к базе «ЗУП ПРОФ» ";
	КонецЕсли;
	//Получаем из ЗУП стоимость отпусков Н_ 
	//ДатаНачала=Дата(2025,01,01);
	//ДатаОкончания=Дата(2025,01,31);
	//Подразделение=Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Аптека Здоровый Город №12");
	
	ТаблицаОтпуска=Новый ТаблицаЗначений;
	//"Сотрудник,ДатаНачала,ДатаОкончания,КоличествоДней,Сумма,ЭтоКомпенсация,Должность,ИНН"
	ТаблицаОтпуска.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(20)));
	ТаблицаОтпуска.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	ТаблицаОтпуска.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый HTTPЗапрос(СтрШаблон("/"+ПараметрыПодключения.ПубликацияНаВебСервере+"/hs/api/oplataotpusk/%1",Формат(ДатаНачала, "ДФ=yyyyMMdd")));
	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Данные1 = ПрочитатьJSON(Чтение);
		Для Каждого Стр Из Данные1 Цикл
			Нов = ТаблицаОтпуска.Добавить();
			//Нов.Период=Дата(СтрЗаменить(Лев(Стр.Период,10),"-",""));
			Нов.ИНН=Стр.ИНН;
			Нов.КоличествоДней=Стр.КоличествоДней;
			Нов.Сумма=Стр.Сумма;
		КонецЦикла
	КонецЕсли;
	ТаблицаОтпуска.Свернуть("ИНН","КоличествоДней,Сумма");
	//Получаем и ЗУП стоимость отпусков _К
	
	//Получаем из ЗУП стоимость больничных Н_
	ТаблицаБольничные=Новый ТаблицаЗначений;
	//"ФизическоеЛицо,ИНН,НомерЛН,ДатаНачала,ДатаОкончания,КоличествоДней,СуммаФинансируемаяФСС,СуммаФинансируемаяРаботодателем"
	ТаблицаБольничные.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(20)));
	ТаблицаБольничные.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	ТаблицаБольничные.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Запрос = Новый HTTPЗапрос(СтрШаблон("/"+ПараметрыПодключения.ПубликацияНаВебСервере+"/hs/api/oplataboll/%1",Формат(ДатаНачала, "ДФ=yyyyMMdd")));
	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Данные2 = ПрочитатьJSON(Чтение);
		Для Каждого Стр Из Данные2 Цикл
			Нов = ТаблицаБольничные.Добавить();
			//Нов.Период=Дата(СтрЗаменить(Лев(Стр.Период,10),"-",""));
			Нов.ИНН=Стр.ИНН;
			Нов.КоличествоДней=Стр.КоличествоДней;
			Нов.Сумма=Стр.СуммаФинансируемаяРаботодателем;
		КонецЦикла
	КонецЕсли;
	ТаблицаБольничные.Свернуть("ИНН","КоличествоДней,Сумма");
	//Получаем и ЗУП стоимость больничных _К 
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Больничные",ТаблицаБольничные);
	Запрос.УстановитьПараметр("Отпуска",ТаблицаОтпуска);
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	//Запрос.УстановитьПараметр("Подразделение",Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Больничные.ИНН КАК ИНН,
	|	Больничные.КоличествоДней КАК КоличествоДней,
	|	Больничные.Сумма КАК Сумма
	|ПОМЕСТИТЬ Больничные
	|ИЗ
	|	&Больничные КАК Больничные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуска.ИНН КАК ИНН,
	|	Отпуска.КоличествоДней КАК КоличествоДней,
	|	Отпуска.Сумма КАК Сумма
	|ПОМЕСТИТЬ Отпуска
	|ИЗ
	|	&Отпуска КАК Отпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияЗППоАптекам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияЗППоАптекам.Должность КАК Должность,
	|	НачисленияЗППоАптекам.ОсновнаяАптека КАК Подразделение,
	|	НачисленияЗППоАптекам.МинимумПоФакту КАК МинимумПоФакту,
	|	НачисленияЗППоАптекам.МаксимумПоФакту КАК МаксимумПоФакту,
	|	НачисленияЗППоАптекам.Оклад0_166_Часы КАК Оклад0_166_Часы,
	|	НачисленияЗППоАптекам.Оклад0_166Сумма КАК Оклад0_166Сумма,
	|	НачисленияЗППоАптекам.БонусЗаОптику КАК БонусЗаОптику,
	|	НачисленияЗППоАптекам.Доплата1 КАК Доплата1,
	|	НачисленияЗППоАптекам.Доплата2 КАК Доплата2,
	|	НачисленияЗППоАптекам.Уборка КАК Уборка,
	|	НачисленияЗППоАптекам.ПроцентKPI1 КАК ПроцентKPI1,
	|	НачисленияЗППоАптекам.ПремияKPI КАК ПремияKPI,
	|	НачисленияЗППоАптекам.СуммаМД1 КАК СуммаМД1,
	|	НачисленияЗППоАптекам.БонусМД1 КАК БонусМД1,
	|	ПоказателиЗаведСрезПоследних.ДоплатаЗаОптику КАК ДоплатаЗаОптику,
	|	ПоказателиЗаведСрезПоследних.ДоплатаЗаКабинетВрача КАК ДоплатаЗаКабинетВрача,
	|	ПоказателиЗаведСрезПоследних.Оклад КАК Оклад,
	|	ПоказателиЗаведСрезПоследних.KPIСтавка КАК KPIСтавка,
	|	Больничные.КоличествоДней КАК БольничныеКоличествоДней,
	|	Больничные.Сумма КАК БольничныеСумма,
	|	Отпуска.КоличествоДней КАК ОтпускКоличествоДней,
	|	Отпуска.Сумма КАК ОтпускСумма,
	|	НачисленияЗППоАптекам.Регистратор КАК Регистратор,
	|	НачисленияЗППоАптекам.ВсегоПоРасчету КАК ВсегоПоРасчету,
	|	НачисленияЗППоАптекам.ИтогоДоГраниц КАК ИтогоДоГраниц,
	|	НачисленияЗППоАптекам.ВсегоПоРасчету - НачисленияЗППоАптекам.ИтогоДоГраниц - НачисленияЗППоАптекам.Доплата1 - НачисленияЗППоАптекам.Доплата2 КАК КоррекцияМинМакс,
	|	Аптека_НачислениеЗарплатыЗаведТЧРасчет.КолСОптикой КАК КолСОптикой,
	|	Аптека_НачислениеЗарплатыЗаведТЧРасчет.ДоплатаЗаОптику КАК ДоплатаЗаОптикуСумма,
	|	Аптека_НачислениеЗарплатыЗаведТЧРасчет.КолКабинетовВрача КАК КолКабинетовВрача,
	|	Аптека_НачислениеЗарплатыЗаведТЧРасчет.ДоплатаЗаКабинетВрача КАК ДоплатаЗаКабинетВрачаСумма
	|ПОМЕСТИТЬ ВТ_НачисленияЗавед
	|ИЗ
	|	РегистрСведений.НачисленияЗППоАптекам КАК НачисленияЗППоАптекам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиЗавед.СрезПоследних(&ДатаНачала, ) КАК ПоказателиЗаведСрезПоследних
	|		ПО НачисленияЗППоАптекам.КоличествоАптек = ПоказателиЗаведСрезПоследних.КоличествоАптек
	|		ЛЕВОЕ СОЕДИНЕНИЕ Больничные КАК Больничные
	|		ПО НачисленияЗППоАптекам.ИНН = Больничные.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отпуска КАК Отпуска
	|		ПО НачисленияЗППоАптекам.ИНН = Отпуска.ИНН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Аптека_НачислениеЗарплатыЗавед.ТЧРасчет КАК Аптека_НачислениеЗарплатыЗаведТЧРасчет
	|		ПО НачисленияЗППоАптекам.Регистратор = Аптека_НачислениеЗарплатыЗаведТЧРасчет.Ссылка
	|			И НачисленияЗППоАптекам.ФизическоеЛицо = Аптека_НачислениеЗарплатыЗаведТЧРасчет.ФизическоеЛицо
	|ГДЕ
	|	НачисленияЗППоАптекам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Если ОграничитьДоступ Тогда
		Запрос.Текст =Запрос.Текст +"
		|	И НачисленияЗППоАптекам.ФизическоеЛицо = &ФизическоеЛицо";
	КонецЕсли;
	
	Запрос.Текст =Запрос.Текст +"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо КАК ФизическоеЛицо,
	|	""01 Отработано дней"" КАК Вид,
	|	ВТ_ЗП1.Оклад0_166_Часы КАК Показатель,
	|	ВТ_ЗП1.Оклад КАК Тариф,
	|	ВТ_ЗП1.Оклад0_166Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Объединение
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""02 Доплата за оптику (Отдел оптики)"",
	|	ВТ_ЗП1.КолСОптикой,
	|	ВТ_ЗП1.ДоплатаЗаОптику,
	|	ВТ_ЗП1.ДоплатаЗаОптикуСумма
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""03 Доплата за кабинет врача "",
	|	ВТ_ЗП1.КолКабинетовВрача,
	|	ВТ_ЗП1.ДоплатаЗаКабинетВрача,
	|	ВТ_ЗП1.ДоплатаЗаКабинетВрачаСумма
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""04 KPI"",
	|	ВТ_ЗП1.ПроцентKPI1,
	|	ВТ_ЗП1.KPIСтавка,
	|	ВТ_ЗП1.ПремияKPI
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""05 Бонус от МД1"",
	|	ВТ_ЗП1.СуммаМД1,
	|	0,
	|	ВТ_ЗП1.БонусМД1
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""06 Доплата1 (разовые)"",
	|	0,
	|	0,
	|	ВТ_ЗП1.Доплата1
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""07 Доплата2 (разовые)"",
	|	0,
	|	0,
	|	ВТ_ЗП1.Доплата2
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""08 Уборка "",
	|	0,
	|	0,
	|	ВТ_ЗП1.Уборка
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""09 Корректировка премии1 (min/max)"",
	|	0,
	|	0,
	|	ВТ_ЗП1.КоррекцияМинМакс
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""10 Больничные, дни"",
	|	ВТ_ЗП1.БольничныеКоличествоДней,
	|	0,
	|	ВТ_ЗП1.БольничныеСумма
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗП1.ФизическоеЛицо,
	|	""11 Отпускные, дни"",
	|	ВТ_ЗП1.ОтпускКоличествоДней,
	|	0,
	|	ВТ_ЗП1.ОтпускСумма
	|ИЗ
	|	ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Объединение.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Объединение.Вид КАК Вид,
	|	СУММА(ВТ_Объединение.Показатель) КАК Показатель,
	|	МАКСИМУМ(ВТ_Объединение.Тариф) КАК Тариф,
	|	СУММА(ВТ_Объединение.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Объединение КАК ВТ_Объединение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Объединение.ФизическоеЛицо,
	|	ВТ_Объединение.Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ЗП1.Подразделение КАК Подразделение,
	|	ВТ_ЗП1.Должность КАК Должность,
	|	ВТ_Итог.Вид КАК Вид,
	|	ВТ_Итог.Показатель КАК Показатель,
	|	ВТ_Итог.Тариф КАК Тариф,
	|	ВТ_Итог.Сумма КАК Сумма,
	|	ВТ_ЗП1.МинимумПоФакту КАК МинимумПоФакту,
	|	ВТ_ЗП1.МаксимумПоФакту КАК МаксимумПоФакту,
	|	ВТ_ЗП1.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияЗавед КАК ВТ_ЗП1
	|		ПО ВТ_Итог.ФизическоеЛицо = ВТ_ЗП1.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Итог.ФизическоеЛицо.Наименование,
	|	Вид";
	
	
	
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Итог.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ВТ_ЗП1.ИНН КАК ИНН,
	//|	ВТ_ЗП1.Подразделение КАК Подразделение,
	//|	ВТ_ЗП1.Должность КАК Должность,
	//|	ВТ_ЗП1.РазрядКатегория КАК РазрядКатегория,
	//|	ВТ_Итог.Вид КАК Вид,
	//|	ВТ_Итог.Показатель КАК Показатель,
	//|	ВТ_Итог.Тариф КАК Тариф,
	//|	ВТ_Итог.Сумма КАК Сумма,
	//|	ВТ_ЗП1.Коэффициент КАК Коэффициент,
	//|	ВТ_ЗП1.МинимумПоФакту КАК МинимумПоФакту,
	//|	ВТ_ЗП1.МаксимумПоФакту КАК МаксимумПоФакту
	//|ИЗ
	//|	ВТ_Итог КАК ВТ_Итог
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗП1 КАК ВТ_ЗП1
	//|		ПО ВТ_Итог.ФизическоеЛицо = ВТ_ЗП1.ФизическоеЛицо
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВТ_Итог.ФизическоеЛицо.Наименование,
	//|	Вид";
	
	ТаблицаИтог = Запрос.Выполнить().Выгрузить();
	таб=Новый ТаблицаЗначений;
	Если ТипЗнч(ТаблицаИтог[0].Регистратор)=Тип("ДокументСсылка.Аптека_НачислениеЗарплатыЗавед")  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.РуководительФизЛицо КАК РуководительФизЛицо,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Подразделение КАК Подразделение,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Номер КАК Номер,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Показатель КАК Показатель,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Вес1 КАК Вес1,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Вес2 КАК Вес2,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.План КАК План,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Факт КАК Факт,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.KPI КАК KPI,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.MIN КАК MIN,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.MAX КАК MAX,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.KPIСУчетомГраниц КАК KPIСУчетомГраниц,
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.KPIВзвеш КАК KPIВзвеш
		|ИЗ
		|	Документ.Аптека_НачислениеЗарплатыЗавед.ПоказателиПоПодразделениям КАК Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям
		|ГДЕ
		|	Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.Ссылка = &Ссылка
		|	И Аптека_НачислениеЗарплатыЗаведПоказателиПоПодразделениям.РуководительФизЛицо = &РуководительФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение,
		|	Номер";
		
		Запрос.УстановитьПараметр("РуководительФизЛицо", ТаблицаИтог[0].ФизическоеЛицо);
		Запрос.УстановитьПараметр("Ссылка", ТаблицаИтог[0].Регистратор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КонецЦикла;
		
		
	КонецЕсли;	
	
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ВнешнийИД =  Новый Структура("ТаблицаИтог", ТаблицаИтог);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийИД , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода.
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	
КонецПроцедуры