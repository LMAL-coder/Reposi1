&НаСервере
Функция ПолучитьДолжностьСотрудника(ВыбранноеЗначение) 
	ДатаСрезаИнформации = Объект.ДатаС;
	ТолькоРазрешенные = Истина;
	КадровыеДанные = "Должность";
	
	МассивСотрудников = Новый Массив;
	
	МассивСотрудников.Добавить(ВыбранноеЗначение);
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаСрезаИнформации);
	
	Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
		Должность = Строка.Должность;
	КонецЦикла;
	Возврат Должность;
конецфункции

&НаСервере
Функция ТЧОбработкаВыбора(ВыбранноеЗначение)
	МассивПоСотруднику=Новый Массив();
	ТабНомер=ВыбранноеЗначение.Код; 
	МассивПоСотруднику.Добавить(ТабНомер);
	ИНН=ВыбранноеЗначение.ФизическоеЛицо.ИНН;
	МассивПоСотруднику.Добавить(ИНН);
	Должность=ПолучитьДолжностьСотрудника(ВыбранноеЗначение);
	МассивПоСотруднику.Добавить(Должность);
	
	Возврат МассивПоСотруднику; 
Конецфункции
&НаСервере
Функция ПолучитьРазмерПремии(Бонус,ВидПремии)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Бонус",Бонус);
	запрос.УстановитьПараметр("ВидПремии",ВидПремии);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1 
	| 	ДПО_ПоказателиПремий.Период КАК Период,
	| 	ДПО_ПоказателиПремий.ВидыПремий КАК ВидыПремий,
	| 	ДПО_ПоказателиПремий.ДиапазонС КАК ДиапазонС,
	| 	ДПО_ПоказателиПремий.ДиапазонПо КАК ДиапазонПо,
	| 	ДПО_ПоказателиПремий.ВеличинаПремии КАК ВеличинаПремии
	| ИЗ
	| 	РегистрСведений.ДПО_ПоказателиПремий КАК ДПО_ПоказателиПремий
	| ГДЕ
	| 	&Бонус МЕЖДУ ДПО_ПоказателиПремий.ДиапазонС И ДПО_ПоказателиПремий.ДиапазонПо
	| 	И ДПО_ПоказателиПремий.Период <= &ДатаС
	|	И ДПО_ПоказателиПремий.ВидыПремий = &ВидПремии
	| УПОРЯДОЧИТЬ ПО
	| ДПО_ПоказателиПремий.Период УБЫВ"; 
	
	//СрезПоследних нельзя брать т.к. 	нужно в запросе задавать значения всех измерений

	//запрос.Текст="ВЫБРАТЬ
	//             |	ДПО_ПоказателиПремийСрезПоследних.ВеличинаПремии КАК ВеличинаПремии
	//             |ИЗ
	//             |	РегистрСведений.ДПО_ПоказателиПремий.СрезПоследних(
	//             |			&ДатаС,
	//             |			ВидыПремий.Ссылка = &ВидПремии
	//             |				И ДиапазонС <= &Бонус
	//             |				И ДиапазонПо >= &Бонус) КАК ДПО_ПоказателиПремийСрезПоследних";
	Результат=запрос.Выполнить().Выгрузить();
	Для каждого Эл из Результат цикл
		БонусМУ=Эл.ВеличинаПремии;
	КонецЦикла;
	Возврат БонусМУ;
КонецФункции

&НаКлиенте
Процедура ТЗСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	МассивПоСотруднику=ТЧОбработкаВыбора(ВыбранноеЗначение);
	СтрокаТаблицы = ЭтаФорма.Элементы.ТЧРасчет.ТекущиеДанные; 
	
	//// Ввести значения в ячейки строки. 
	СтрокаТаблицы.ТабНомер = МассивПоСотруднику[0];
	СтрокаТаблицы.ИНН = МассивПоСотруднику[1];
	СтрокаТаблицы.Должность = МассивПоСотруднику[2];
	//СтрокаТаблицы.ДатаОтгрузки = СтрокаТаблицы.Заказ.ДатаОтгрузки; 
КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеИзТабеля()
	запрос=новый запрос;
	запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст="ВЫБРАТЬ     
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ПериодРегистрации МЕЖДУ &ДатаС И &ДатаПо
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Проведен = &истина";
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		запрос.Текст=запрос.Текст+"
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Подразделение = &Подразделение";
	конецесли;
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции
&НаСервере
Функция ПолучитьДанныеИзТабеля2Мес()
	//Берем Ссыки за текущий и прошлый месяц, чтобы учесть переходящий график ДобавитьМесяц(Объект.ДатаС,-1) 
	запрос=новый запрос;
	запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	запрос.УстановитьПараметр("ДатаС",ДобавитьМесяц(Объект.ДатаС,-1));
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст="ВЫБРАТЬ     
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ПериодРегистрации МЕЖДУ &ДатаС И &ДатаПо
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Проведен = &истина";
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		запрос.Текст=запрос.Текст+"
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Подразделение = &Подразделение";
	конецесли;
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции
&НаСервере
Функция ПолучитьДанныеИзТабеляСотр(Сотрудник)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст="ВЫБРАТЬ     
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ПериодРегистрации МЕЖДУ &ДатаС И &ДатаПо
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Проведен = &истина";
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		запрос.Текст=запрос.Текст+"
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Подразделение = &Подразделение";
	конецесли;
	Если ЗначениеЗаполнено(Сотрудник) тогда
		запрос.Текст=запрос.Текст+"
		//LMAL_05-03-2023_Н
		//|И	ТабельУчетаРабочегоВремениДанныеОВремени.СОтрудник В (&Сотрудник)";
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник.ГоловнойСотрудник В (&Сотрудник)";
		//LMAL_05-03-2023_К
	конецесли;
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;	
конецфункции
&НаСервере
Функция ПроверкаРаботыСотрудниковВАптеке()
	Проверка=истина;
	МасСотрудников=ТЗ.Выгрузить(,"Сотрудник");
	ВремяПоТабелю=ПолучитьДанныеИзТабеля(); 
	Для каждого Эл из МасСотрудников цикл
		РезПоиска=ВремяПоТабелю.Найти(Эл.Сотрудник,"Сотрудник");
		Если РезПоиска = Неопределено Тогда
			Сообщить("Такого сотрудника нет в табеле -"+Строка(Эл.Сотрудник));
			Проверка=Ложь;
		конецесли;
	конеццикла;
	
	Возврат Проверка;
	
конецфункции
&НаСервере
Процедура ЗаполнитьТЗ(ВыбранноеЗначение)
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.ТЧРасчет.Добавить();
		НоваяСтрока.Сотрудник = ВыбранныйЭлемент;
		НоваяСтрока.ИНН = ВыбранныйЭлемент.ФизическоеЛицо.ИНН;
		НоваяСтрока.ТабНомер = ВыбранныйЭлемент.Код;
		ТолькоРазрешенные = Истина;
		
		ДатаСрезаИнформации = Объект.ДатаС;
		
		КадровыеДанные = "Должность";
		
		МассивСотрудников = Новый Массив;
		
		МассивСотрудников.Добавить(ВыбранныйЭлемент);
		
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		
		ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаСрезаИнформации);
		
		Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
			Должность = Строка.Должность;
		КонецЦикла;
		НоваяСтрока.Должность = Должность;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧ()
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) тогда
		Сообщить("Не заполнены подразделение для расчета"); 
	Иначе
		Если  НЕ ЗначениеЗаполнено(Объект.ДатаС) или НЕ ЗначениеЗаполнено(Объект.ДатаПо) тогда
			Сообщить("Не заполнены даты периода для расчета");
		иначе
			//Если НЕ ЗначениеЗаполнено(Объект.ПланПоВыручке)или НЕ ЗначениеЗаполнено(Объект.ПланПоМУ) или не ЗначениеЗаполнено(Объект.ПроданоУпаковок)   тогда
			//	Сообщить("Не заполнены показатели для расчета");
			//иначе
				РезультатПроверки=ПроверкаРаботыСотрудниковВАптеке();
				Если РезультатПроверки=ложь тогда
					Возврат;
				конецесли;
			//конецесли;
		КонецЕсли;	
		
		НормаЧасов=0;
		KPIДень=0;
		KPIНочь=0;
		
		Запрос=новый запрос;
		запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
		запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
		запрос.Текст="ВЫБРАТЬ
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.Бонус1 КАК Бонус1,
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.Бонус2 КАК Бонус2,
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.Бонус1Оптика КАК Бонус1Оптика,
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.Бонус2Оптика КАК Бонус2Оптика,
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.СтоимостьКомандировки КАК СтоимостьКомандировки,
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.СтоимостьКомандировкиОптика КАК СтоимостьКомандировкиОптика,
		|	ДПО_ДифференциацияБонусаПоСетиСрезПоследних.НадбавкаККомандировке КАК НадбавкаККомандировке
		|ИЗ
		|	РегистрСведений.ДифференциацияБонусаПоСети.СрезПоследних(&ДатаС, Подразделение = &Подразделение) КАК ДПО_ДифференциацияБонусаПоСетиСрезПоследних";
		
		РезультатПоказ=запрос.Выполнить().Выгрузить();
		Для каждого Эл из РезультатПоказ цикл 
			Бонус1=Эл.Бонус1;
			Бонус2=Эл.Бонус2;
			Бонус1Оптика=Эл.Бонус1Оптика;
			Бонус2Оптика=Эл.Бонус2Оптика;
			СтоимостьКомандировки=Эл.СтоимостьКомандировки;
			СтоимостьКомандировкиОптика=Эл.СтоимостьКомандировкиОптика;
			НадбавкаККомандировке=Эл.НадбавкаККомандировке;
		конеццикла;
		
		ДокументыТабеля=ПолучитьДанныеИзТабеля2Мес();
		Регистраторы=ДокументыТабеля.ВыгрузитьКолонку("Ссылка");
		ВидыВремени=Новый Массив;
		ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
		ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы"));
		Сотрудники=Объект.ТЧРасчет.Выгрузить(,"Сотрудник");
		
		запрос=новый запрос;
		запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
		запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
		запрос.УстановитьПараметр("Сотрудники",Сотрудники);
		запрос.УстановитьПараметр("ВидыВремени",ВидыВремени);
		запрос.УстановитьПараметр("Регистраторы",Регистраторы);
		
		
		запрос.Текст="ВЫБРАТЬ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы КАК Часы,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		|ГДЕ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)";
		РезультатТ=запрос.Выполнить().Выгрузить();
		
		ВремяПоСотр=РезультатТ.Скопировать();
		//ВремяПоСотр=запрос.Выполнить().Выгрузить();
		ВремяПоСотр.Свернуть("Сотрудник,ВидУчетаВремени","Часы");
		РезультатТ.Свернуть("Сотрудник,Период","Часы");
		//Запрос = Новый Запрос;
		//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		//Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
		//Запрос.УстановитьПараметр("ТЗ", РезультатТ);
		//Запрос.Выполнить();
		//// Теперь ТЗ можно использовать в запросе:
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ТЗ.Сотрудник КАК Сотрудник,
		//|	ВЫБОР
		//|		КОГДА ТЗ.Часы >= 12
		//|			ТОГДА 1
		//|		ИНАЧЕ 0
		//|	КОНЕЦ КАК КоличествоОтработок12,
		//|	ТЗ.Период КАК Период
		//|ИЗ
		//|	ТЗ КАК ТЗ";
		//РезТ = Запрос.Выполнить().Выгрузить();
		//РезТ.Свернуть("Сотрудник","КоличествоОтработок12");
		
		// LMAL 21-08-2024 считаем количество отработанных часов больше или равно 12 и 10часво с учетом переходящего графика _Н
		Запрос12 = Новый Запрос;
		запрос12.УстановитьПараметр("ДатаС",Объект.ДатаС);
		запрос12.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
		запрос12.УстановитьПараметр("Сотрудники",Сотрудники);
		запрос12.УстановитьПараметр("ВидыВремени",ВидыВремени);
		запрос12.УстановитьПараметр("Регистраторы",Регистраторы);
		Запрос12.Текст ="ВЫБРАТЬ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
		|	СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы) КАК Часы,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Объединение
		|ИЗ
		|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		|ГДЕ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник,
		|	СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы),
		|	ДОБАВИТЬКДАТЕ(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период, ДЕНЬ, -1)
		|ИЗ
		|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		|ГДЕ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И ДОБАВИТЬКДАТЕ(&ДатаПо, ДЕНЬ, 1)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период, ДЕНЬ, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Объединение.Сотрудник КАК Сотрудник,
		|	СУММА(ВТ_Объединение.Часы) КАК Часы,
		|	ВТ_Объединение.Период КАК Период
		|ПОМЕСТИТЬ ВТ_Группировка
		|ИЗ
		|	ВТ_Объединение КАК ВТ_Объединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Объединение.Сотрудник,
		|	ВТ_Объединение.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Группировка.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Группировка.Часы >= 10
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоОтработок10
		|ИЗ
		|	ВТ_Группировка КАК ВТ_Группировка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Группировка.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Группировка.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Группировка.Часы >= 12
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоОтработок12
		|ИЗ
		|	ВТ_Группировка КАК ВТ_Группировка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Группировка.Сотрудник";
		МассивРезТ = Запрос12.ВыполнитьПакет();
		
		РезТ10=МассивРезТ[2].Выгрузить();
		РезТ= МассивРезТ[3].Выгрузить();
		// LMAL 21-08-2024_К
		
		////LMAL_03-08-2023_н Считаем время всего и по Продавец-консультант оптики
		//Отбор1=Новый Структура;
		//Отбор1.Вставить("Должность",Справочники.Должности.НайтиПоНаименованию("Продавец-консультант оптики",истина));
		//СотрудникиОптики=Объект.ТЧРасчет.Выгрузить(Отбор1,"Сотрудник");
		//
		//запрос1=новый запрос;
		//запрос1.УстановитьПараметр("ДатаС",Объект.ДатаС);
		//запрос1.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
		//запрос1.УстановитьПараметр("Сотрудники",Сотрудники);
		//запрос1.УстановитьПараметр("СотрудникиОптики",СотрудникиОптики);
		//запрос1.УстановитьПараметр("ВидыВремени",ВидыВремени);
		//запрос1.УстановитьПараметр("Регистраторы",Регистраторы);
		//запрос1.Текст="ВЫБРАТЬ
		//|	ЕСТЬNULL(СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы),0) КАК ЧасыВсего
		//|ИЗ
		//|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		//|ГДЕ
		//|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЕСТЬNULL(СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы),0) КАК ЧасыВсегоОпитка
		//|ИЗ
		//|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		//|ГДЕ
		//|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&СотрудникиОптики)
		//|";
		//
		//МассивРезультатов=запрос1.ВыполнитьПакет();
		//
		//ВремяВсего=0;
		//ВремяВсегоОптики=0;
		//Если Не МассивРезультатов[0].Пустой() Тогда
		//	Выборка1=МассивРезультатов[0].Выбрать();
		//	Пока Выборка1.Следующий() Цикл
		//		ВремяВсего=Выборка1.ЧасыВсего;
		//	КонецЦикла; 
		//КонецЕсли;
		//
		//Если Не МассивРезультатов[1].Пустой() Тогда
		//	Выборка1=МассивРезультатов[1].Выбрать();
		//	Пока Выборка1.Следующий() Цикл
		//		ВремяВсегоОптики=Выборка1.ЧасыВсегоОпитка;
		//	КонецЦикла;
		//КонецЕсли;
		////LMAL_03-08-2023_к
		
		//LMAL_07-11-2023_н считаем кол-во праздников РаботаДень и РаботаНочь
		запрос2=новый запрос;
		запрос2.Текст="ВЫБРАТЬ
		              |	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
		              |	ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
		              |	СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы) КАК Часы
		              |ИЗ
		              |	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		              |		ПО ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период = ДанныеПроизводственногоКалендаря.Дата
		              |			И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		              |ГДЕ
		              |	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		              |	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		              |	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		              |	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)
		              |	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы > 0
		              |	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник,
		              |	ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени";
		запрос2.УстановитьПараметр("ДатаС",Объект.ДатаС);
		запрос2.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
		запрос2.УстановитьПараметр("Сотрудники",Сотрудники);
		запрос2.УстановитьПараметр("ВидыВремени",ВидыВремени);
		запрос2.УстановитьПараметр("Регистраторы",Регистраторы);
		запрос2.УстановитьПараметр("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("Российская Федерация"));
		РезультатПраздники=запрос2.Выполнить().Выгрузить();
		//LMAL_07-11-2023_к
		
		ВремяИтог=ВремяПоСотр.Скопировать();
		ВремяИтог.Свернуть("Сотрудник","Часы"); 
		Для каждого Эл из Объект.ТЧРасчет цикл
			Минимум=0;
			Максимум=0;
			СтоимостьПринятогоЗвонка=0;
			СтоимостьСобраннойУпаковки=0;
			
			запрос=новый запрос;
			запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
			запрос.УстановитьПараметр("Должность",Эл.Должность);
			запрос.УстановитьПараметр("КатегорияСотрудник",Эл.РазрядКатегория);
			запрос.УстановитьПараметр("КатегорияАптеки",Эл.РазрядПодразделение);
			запрос.Текст="ВЫБРАТЬ
			             |	ДПО_ПоказателиПоДолжностямСрезПоследних.НормаЧасов КАК НормаЧасов,
			             |	ДПО_ПоказателиПоДолжностямСрезПоследних.Минимум КАК Минимум,
			             |	ДПО_ПоказателиПоДолжностямСрезПоследних.Максимум КАК Максимум,
			             |	ДПО_ПоказателиПоДолжностямСрезПоследних.Коэффициент КАК Коэффициент,
			             |	ДПО_ПоказателиПоДолжностямСрезПоследних.СтоимостьПринятогоЗвонка КАК СтоимостьПринятогоЗвонка,
			             |	ДПО_ПоказателиПоДолжностямСрезПоследних.СтоимостьСобраннойУпаковки КАК СтоимостьСобраннойУпаковки
			             |ИЗ
			             |	РегистрСведений.ПоказателиПоДолжностям.СрезПоследних(
			             |			&ДатаС,
			             |			КатегорияАптеки = &КатегорияАптеки
			             |				И КатегорияСотрудник = &КатегорияСотрудник
			             |				И Должность = &Должность) КАК ДПО_ПоказателиПоДолжностямСрезПоследних";
			РезультатНормативы=запрос.Выполнить();//.Выгрузить();
			Если РезультатНормативы.Пустой() Тогда
				Сообщить("Не найдены параметры в настройках Показатели по должностям для: Должность="+Эл.Должность+", РазрядКатегория="+Эл.РазрядКатегория+", РазрядПодразделение="+Эл.РазрядПодразделение+", НаДату="+Объект.ДатаС);
			Иначе
				РезультатНормативы1=РезультатНормативы.Выгрузить();
				Для каждого Эл1 из РезультатНормативы1 цикл
					НормаЧасов=Эл1.НормаЧасов;
					Минимум=Эл1.Минимум;
					Максимум=Эл1.Максимум;
					СтоимостьПринятогоЗвонка=Эл1.СтоимостьПринятогоЗвонка;
					СтоимостьСобраннойУпаковки=Эл1.СтоимостьСобраннойУпаковки;
				КонецЦикла;
			КонецЕсли;
			
			
			Если Эл.Уволенная=истина тогда
				ВводДанных=ПроверитьНаУволенных(Эл.Сотрудник);
				Для каждого ЭлС из ВводДанных цикл
					ЗаполнитьЗначенияСвойств(Эл,ЭлС);
					Эл.ЛичнаяВыручкаПоДМ=ЭлС.ЛичнаяВыручкаДТМ;
					Эл.ЛичнаяВыручка=ЭлС.ЛичнаяВыручкаНеДТМ;
					Эл.ОтработаноВсего=ЭлС.ВремяДень+ЭлС.ВремяНочь;
					Эл.Оценка=ЭлС.ОценкаТекст;
					//Эл.ЗапретРедактирования=истина;
				Конеццикла;
			иначе
				ВремяИтогПоСотр=0;
				ВремяИтогПоСотр= ВремяИтог.НайтиСтроки(Новый Структура("Сотрудник",Эл.Сотрудник));
				
				Эл.Минимум=Минимум;
				Эл.Максимум=Максимум; 
				Попытка
					Эл.МинимумВремени=Окр(Минимум*ВремяИтогПоСотр[0].Часы/НормаЧасов,2);
				Исключение
				КонецПопытки;
				Попытка
					Эл.МаксимумВремени=Окр(Максимум*ВремяИтогПоСотр[0].Часы/НормаЧасов,2);
				Исключение
				КонецПопытки;
				Попытка
					Эл.ОтработаноВсего=ВремяИтогПоСотр[0].Часы;
				Исключение
				КонецПопытки;
				
				ВремяДень= ВремяПоСотр.НайтиСтроки(Новый Структура("Сотрудник,ВидУчетаВремени",Эл.Сотрудник,Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка")));
				Попытка
					Эл.ВремяДень=ВремяДень[0].Часы; 
				Исключение
				КонецПопытки;
				ВремяНочь= ВремяПоСотр.НайтиСтроки(Новый Структура("Сотрудник,ВидУчетаВремени",Эл.Сотрудник,Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы")));
				
				Попытка
					Эл.ВремяНочь=ВремяНочь[0].Часы; 
				Исключение
				КонецПопытки; 
				Эл.ПраздникиВремяДень=0;
				Эл.ПраздникиВремяНочь=0; 
				////Заполняем праздники только для Продавец-консультант
				//Если Эл.Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант",истина) Тогда 
					ПраздникиВремяДень= РезультатПраздники.НайтиСтроки(Новый Структура("Сотрудник,ВидУчетаВремени",Эл.Сотрудник,Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка")));
					Попытка
						Эл.ПраздникиВремяДень=ПраздникиВремяДень[0].Часы; 
					Исключение
					КонецПопытки; 
					ПраздникиВремяНочь= РезультатПраздники.НайтиСтроки(Новый Структура("Сотрудник,ВидУчетаВремени",Эл.Сотрудник,Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы")));
					Попытка
						Эл.ПраздникиВремяНочь=ПраздникиВремяНочь[0].Часы; 
					Исключение
					КонецПопытки;
				//КонецЕсли;
				//LMAL 03-08-2023_н
				////Для "Продавец-консультант оптики" свой расчет 
				//Если Эл.Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант оптики",истина) Тогда
				//	Попытка
				//		Эл.БонусЗаЛичнуюВыручку=Окр(Бонус1Оптика*Эл.ЛичнаяВыручка/100,0);
				//	Исключение
				//	конецпопытки;
				//	
				//	Попытка
				//		Эл.БонусПоДМ=Окр(Бонус2Оптика*Эл.ЛичнаяВыручкаПоДМ/100,0);
				//	Исключение
				//	конецпопытки;
				//	
				//	Попытка
				//		//Эл.ПланМУСреднечасовой=Окр(Объект.ПланПоМУ/ВремяВсегоОптики,2);
				//		Эл.ПланМУСреднечасовой=0;
				//	Исключение
				//	конецпопытки;
				//	
				//	Попытка
				//		Эл.ФактПродажМУЗаЧас=Окр(Эл.ФактПродажМУЗаМесяц/ВремяИтогПоСотр[0].Часы,4);
				//	Исключение
				//	конецпопытки; 
				//	
				//	Попытка
				//		Бонус=Окр((Эл.ФактПродажМУЗаЧас/Эл.ПланМУСреднечасовой)*100,0);
				//		БонусМУ=ПолучитьРазмерПремии(Бонус,Перечисления.ВидыПремий.ПремияМаркетинговыеАкции);
				//		Эл.БонусМУ=Эл.ОтработаноВсего*БонусМУ/НормаЧасов;
				//		// Вставить содержимое обработчика.
				//	Исключение
				//	КонецПопытки;
				//	
				//	Попытка
				//		Эл.Среднечасовое1=Окр(Объект.ПроданоУпаковокОптика/ВремяВсегоОптики,4);
				//	Исключение
				//	конецпопытки;
				//	
				//	Попытка
				//		Эл.Среднечасовое2=Окр(Эл.КоличествоУпаковок/ВремяИтогПоСотр[0].Часы,4);
				//	Исключение
				//	конецпопытки; 
				//	
				//	Попытка
				//		БонусПром=Окр((Эл.Среднечасовое2/Эл.Среднечасовое1)*100,0);
				//		БонусСроковые=ПолучитьРазмерПремии(БонусПром,Перечисления.ВидыПремий.ПремияСроки);
				//		Эл.БонусСроковые=Эл.ОтработаноВсего*БонусСроковые/НормаЧасов;
				//		// Вставить содержимое обработчика.
				//	Исключение
				//	КонецПопытки;
				//	БонусЗаОценку=0;
				//	Оценка=0;
				//	Попытка
				//		
				//		Если Эл.Оценка=Перечисления.ВидыОценок.Удовлетворительная тогда
				//			Оценка=3;
				//		Конецесли;
				//		Если Эл.Оценка=Перечисления.ВидыОценок.Хорошая тогда
				//			Оценка=4;
				//		Конецесли;
				//		Если Эл.Оценка=Перечисления.ВидыОценок.Высокая тогда
				//			Оценка=5;
				//		Конецесли;
				//		
				//		БонусЗаОценку=ПолучитьРазмерПремии(Оценка,Перечисления.ВидыПремий.ПремияЛичныеКачества);
				//		Эл.БонусЗаОценку=Эл.ОтработаноВсего*БонусЗаОценку/НормаЧасов;
				//	Исключение
				//	КонецПопытки; 
				//	Эл.ИтогоБонусов=Эл.БонусЗаОценку+Эл.БонусСроковые+Эл.БонусМУ+Эл.БонусПоДМ+Эл.БонусЗаЛичнуюВыручку;
				//	Если Эл.ПодразделениеСотрудника<>Объект.Подразделение тогда
				//		//Смотрим отработал ли он больше 12 часов
				//		КоличествоПереработок=РезТ.НайтиСтроки(Новый Структура("Сотрудник",Эл.Сотрудник));
				//		Попытка
				//			//Эл.БонусЗаСовмещение=750*КоличествоПереработок[0].КоличествоОтработок12;
				//			Эл.БонусЗаСовмещение=СтоимостьКомандировкиОптика*КоличествоПереработок[0].КоличествоОтработок12;
				//			
				//		Исключение
				//		КонецПопытки;
				//	конецесли;
				//Иначе//Код для не Продавец-Консультат оптики
					
					Попытка
						Эл.БонусЗаЛичнуюВыручку=Окр(Бонус1*Эл.ЛичнаяВыручка/100,0);
					Исключение
					конецпопытки;
					
					Попытка
						Эл.БонусПоДМ=Окр(Бонус2*Эл.ЛичнаяВыручкаПоДМ/100,0);
					Исключение
					конецпопытки;
					
					Попытка
						Эл.БонусЗаОптику=Окр(Бонус1Оптика*Эл.ЛичнаяВыручкаОптика/100,0);
					Исключение
					конецпопытки;
					//Попытка
					//	Эл.ПланМУСреднечасовой=Окр(Объект.ПланПоМУ/(ВремяВсего-ВремяВсегоОптики),4);
					//Исключение
					//конецпопытки;
					//
					//Попытка
					//	Эл.ФактПродажМУЗаЧас=Окр(Эл.ФактПродажМУЗаМесяц/ВремяИтогПоСотр[0].Часы,4);
					//Исключение
					//конецпопытки; 
					//
					//Попытка
					//	Бонус=Окр((Эл.ФактПродажМУЗаЧас/Эл.ПланМУСреднечасовой)*100,0);
					//	БонусМУ=ПолучитьРазмерПремии(Бонус,Перечисления.ВидыПремий.ПремияМаркетинговыеАкции);
					//	Эл.БонусМУ=Эл.ОтработаноВсего*БонусМУ/НормаЧасов;
					//	// Вставить содержимое обработчика.
					//Исключение
					//КонецПопытки;
					//					
					//Попытка
					//	Эл.Среднечасовое1=Окр(Объект.ПроданоУпаковок/(ВремяВсего-ВремяВсегоОптики),4);
					//	//Эл.Среднечасовое1=Окр(Объект.ПроданоУпаковок/ВремяИтог.Итог("Часы"),2);	
					//Исключение
					//конецпопытки;
					//
					//Попытка
					//	Эл.Среднечасовое2=Окр(Эл.КоличествоУпаковок/ВремяИтогПоСотр[0].Часы,4);
					//Исключение
					//конецпопытки; 
					//
					//Попытка
					//	БонусПром=Окр((Эл.Среднечасовое2/Эл.Среднечасовое1)*100,0);
					//	БонусСроковые=ПолучитьРазмерПремии(БонусПром,Перечисления.ВидыПремий.ПремияСроки);
					//	Эл.БонусСроковые=Эл.ОтработаноВсего*БонусСроковые/НормаЧасов;
					//	// Вставить содержимое обработчика.
					//Исключение
					//КонецПопытки;
					//
					//БонусЗаОценку=0;
					//Оценка=0;
					//Попытка
					//	
					//	Если Эл.Оценка=Перечисления.ВидыОценок.Удовлетворительная тогда
					//		Оценка=3;
					//	Конецесли;
					//	Если Эл.Оценка=Перечисления.ВидыОценок.Хорошая тогда
					//		Оценка=4;
					//	Конецесли;
					//	Если Эл.Оценка=Перечисления.ВидыОценок.Высокая тогда
					//		Оценка=5;
					//	Конецесли;
					//	
					//	БонусЗаОценку=ПолучитьРазмерПремии(Оценка,Перечисления.ВидыПремий.ПремияЛичныеКачества);
					//	Эл.БонусЗаОценку=Эл.ОтработаноВсего*БонусЗаОценку/НормаЧасов;
					//Исключение
					//КонецПопытки;
					
					//17-06-2024 
					//Для продавец-консультант!!!! 
					//бонусы дополнительно пересчитываем  в расчете ЗП, т.к. мы будем суммировать по всем местам работы и смотреть на значение
					//Если Эл.Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант",истина) Тогда 
						Эл.БонусМУ=ПолучитьРазмерПремии(Эл.СуммаПродажТоваровНаПродвижении,Перечисления.ВидыПремий.ПремияМаркетинговыеАкции2);
						Эл.БонусСроковые=ПолучитьРазмерПремии(Эл.СуммаПродажСрокиИЗМЗ,Перечисления.ВидыПремий.ПремияСроки2);
						Эл.БонусЗаОценку=0; //убираем бонусы за оценку
					//КонецЕсли;
					////17-06-2024 к
					
					//23-12-2024 считаем премию за кол-во принятых звонков и собранных упаковок по интернет заказам.
					    Эл.БонусЗвонки=Эл.КолПринятыхЗвонков*СтоимостьПринятогоЗвонка;
					    Эл.БонусУпаковки=Эл.КолСобранныхУпаковок*СтоимостьСобраннойУпаковки;
						
					Эл.ИтогоБонусов=Эл.БонусЗаОценку+Эл.БонусСроковые+Эл.БонусМУ+Эл.БонусПоДМ+Эл.БонусЗаЛичнуюВыручку+Эл.БонусЗаОптику+Эл.БонусЗвонки+Эл.БонусУпаковки;
					
					Если Эл.ПодразделениеСотрудника<>Объект.Подразделение тогда
						//Смотрим отработал ли он больше 12 часов, для продавец консультант оптики 10ч
						Если Эл.Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант оптики",истина) Тогда
							КоличествоПереработок=РезТ10.НайтиСтроки(Новый Структура("Сотрудник",Эл.Сотрудник));
							Попытка
								Эл.БонусЗаСовмещение=СтоимостьКомандировкиОптика*КоличествоПереработок[0].КоличествоОтработок10;
							Исключение
							КонецПопытки;	
						Иначе
							КоличествоПереработок=РезТ.НайтиСтроки(Новый Структура("Сотрудник",Эл.Сотрудник));
							Попытка
								Эл.БонусЗаСовмещение=(СтоимостьКомандировки+НадбавкаККомандировке)*КоличествоПереработок[0].КоличествоОтработок12;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;//Для "Продавец-консультант оптики" свой расчет
				//LMAL 03-08-2023_к
			КонецЕсли;
					
		КонецЦикла;
		Объект.ФактПоВыручкеПродавцов=Объект.ТЧРасчет.Итог("ЛичнаяВыручка")+Объект.ТЧРасчет.Итог("ЛичнаяВыручкаПоДМ")+Объект.ТЧРасчет.Итог("ЛичнаяВыручкаОптика");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура(
	"ЗакрыватьПриВыборе,МножественныйВыбор",
	Ложь,
	Истина
	);
	ОткрытьФорму(
	"Справочник.Сотрудники.ФормаВыбора",
	ПараметрыФормы,
	Элементы.ТЧРасчет
	);
КонецПроцедуры

&НаКлиенте
Процедура ТЗОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьТЗ(ВыбранноеЗначение);
КонецПроцедуры


&НаКлиенте
Процедура РассчитатьДанные(Команда)
	ЗаполнитьТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ТЧРасчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ЗаполнитьТЗ(ВыбранноеЗначение);
	
КонецПроцедуры
&НаСервере 
Функция ЕстьСотрудникЧасы(Сотрудник)
	Проверка=ложь;
	ДокументыТабеля=ПолучитьДанныеИзТабеля();
	Регистраторы=ДокументыТабеля.ВыгрузитьКолонку("Ссылка");
	ВидыВремени=Новый Массив;
	ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
	ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы"));
	
	запрос=новый запрос;
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.УстановитьПараметр("ВидыВремени",ВидыВремени);
	запрос.УстановитьПараметр("Регистраторы",Регистраторы);
	
	
	запрос.Текст="ВЫБРАТЬ
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы КАК Часы,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
	|ГДЕ
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
	|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
	|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудник)";
	ВремяПоСотр=запрос.Выполнить().Выгрузить();
	
	Возврат ВремяПоСотр;
конецФункции
Функция ПроверитьНаУволенных(Сотрудник)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	
	запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоАптекам.Сотрудник КАК Сотрудник,
	|	ДанныеПоАптекам.Уволенная КАК Уволенная,
	|	ДанныеПоАптекам.ЛичнаяВыручкаДТМ КАК ЛичнаяВыручкаДТМ,
	|	ДанныеПоАптекам.ЛичнаяВыручкаНеДТМ КАК ЛичнаяВыручкаНеДТМ,
	|	ДанныеПоАптекам.БонусЗаСовмещение КАК БонусЗаСовмещение,
	|	ДанныеПоАптекам.БонусЗаЛичнуюВыручку КАК БонусЗаЛичнуюВыручку,
	|	ДанныеПоАптекам.БонусПоДМ КАК БонусПоДМ,
	|	ДанныеПоАптекам.БонусМУ КАК БонусМУ,
	|	ДанныеПоАптекам.БонусСроковые КАК БонусСроковые,
	|	ДанныеПоАптекам.БонусЗаОценку КАК БонусЗаОценку,
	|	ДанныеПоАптекам.ВремяНочь КАК ВремяНочь,
	|	ДанныеПоАптекам.ВремяДень КАК ВремяДень,
	|	ДанныеПоАптекам.ПодразделениеРаботы КАК ПодразделениеРаботы,
	|	ДанныеПоАптекам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоАптекам.ОценкаТекст КАК ОценкаТекст,
	|	ДанныеПоАптекам.Среднечасовое1 КАК Среднечасовое1,
	|	ДанныеПоАптекам.Среднечасовое2 КАК Среднечасовое2,
	|	ДанныеПоАптекам.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ДанныеПоАптекам.ФактПродажМУЗаМесяц КАК ФактПродажМУЗаМесяц,
	|	ДанныеПоАптекам.ФактПродажМУЗаЧас КАК ФактПродажМУЗаЧас,
	|	ДанныеПоАптекам.ПланМУСреднечасовой КАК ПланМУСреднечасовой
	|ИЗ
	|	РегистрСведений.ДанныеПоАптекам КАК ДанныеПоАптекам
	|ГДЕ
	|	ДанныеПоАптекам.Сотрудник = &Сотрудник
	|	И ДанныеПоАптекам.ДатаС >= &ДатаС
	|	И ДанныеПоАптекам.ДатаПо <= &ДатаПо";
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
конецфункции
Функция ПроверитьПодрАкция(Аптека)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Дата",Объект.ДатаС);
	запрос.УстановитьПараметр("Аптека",Аптека);
	запрос.Текст="ВЫБРАТЬ
	|	АкцииПоАптекамСрезПоследних.Акция КАК Акция
	|ИЗ
	|	РегистрСведений.АкцииПоАптекам.СрезПоследних(&Дата, Аптека = &Аптека) КАК АкцииПоАптекамСрезПоследних";
	Результат=запрос.Выполнить().Выгрузить();
	Если Результат.Количество()>0 тогда
		Акция=Результат[0].Акция;
	иначе
		Акция=Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
	конецесли;
	Возврат Акция;
конецфункции
Процедура ЗаполнитьТЧПоТабелю()
	Объект.ТЧРасчет.Очистить();
	ТолькоРазрешенные = Истина;
	РезПоСотр=ПолучитьДанныеИзТабеля();
	РезПоСотр.Свернуть("Сотрудник"); 
	
	//LMAL 21-08-2024_н Получаем данные мотивации из ЕРП
	
	//ТаблицаДанныеМотивации=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеМотивацииИзРПТК(Объект.Подразделение, НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо),"12");
	//ТаблицаДанныеМотивацииОптики=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеМотивацииИзРПТК(Объект.Подразделение, НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо),"36");
	
	//Получаем продвижение товаров, данные из ЕРП
	ТаблицаДанныеПродвиженияТоваров=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеПродвиженияТоваровИзЕРП(Объект.Подразделение ,НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо));
	//КемПродано,КоличествоОборот,СуммаОборот,СуммаСкидкиОборот
	ТаблицаДанныеМотивации=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеМотивацииИзЕРП(Объект.Подразделение ,НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо));
	//КемПродано,Сумма,СуммаДТМ,СуммаОптика,КоличествоИнтернет
	
	ТаблицаДанныеЗМЗ=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеЗМЗИзЕРП(Объект.Подразделение ,НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо));
	//КемПродано,Количество60,Сумма60,Количество365,Сумма365,Количество1095,Сумма1095
	//LMAL 21-08-2024_к
	//ТабВсегоВыручки=Новый ТаблицаЗначений;
	Объект.ПланПоВыручке=ТаблицаДанныеМотивации.Итог("Сумма");
    	
	Для Каждого ВыбранныйЭлемент Из РезПоСотр Цикл
		Проверить=Истина;
		Проверка=ЕстьСотрудникЧасы(ВыбранныйЭлемент.Сотрудник);
		Если Проверка.Количество()=0 тогда
			Продолжить;
			
		КонецЕсли;
		
		Для каждого ДатаПроверки из Проверка цикл
			КадровыеДанные = "Должность,РазрядКатегория";
			
			МассивСотрудников = Новый Массив;
			
			МассивСотрудников.Добавить(ВыбранныйЭлемент.Сотрудник);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаПроверки.Период);
			
			Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
				Должность = Строка.Должность;
				
			КонецЦикла;
			
			РазрядКатегория=Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
			МассивСотрудников = Новый Массив;
			
			МассивСотрудников.Добавить(ВыбранныйЭлемент.Сотрудник.ГоловнойСотрудник);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаПроверки.Период);
			
			Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
				РазрядКатегория=Строка.Разрядкатегория;
			КонецЦикла; 
			
			МассивСотрудников1 = Новый Массив;
			
			МассивСотрудников1.Добавить(ВыбранныйЭлемент.Сотрудник.ГоловнойСотрудник);
			
			КадровыеДанные = "Подразделение"; 
			
			КадровыеДанныеСотрудников1 = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников1, КадровыеДанные, ДатаПроверки.Период);
			Для Каждого Строка Из КадровыеДанныеСотрудников1 Цикл
				ПодразделениеСОтрудника = Строка.Подразделение;
			КонецЦикла;
			
			//с 01-02-2024 Добавить Консультант /Интернет-аптека/
			//Должность=Справочники.Должности.НайтиПоНаименованию("Консультант")
			
			Если Должность=Справочники.Должности.НайтиПоНаименованию("Фармацевт") или 
				Должность=Справочники.Должности.НайтиПоНаименованию("Старший фармацевт") или 
				Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант") или
				Должность=Справочники.Должности.НайтиПоНаименованию("Консультант") или
				Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант оптики")Тогда
				НоваяСтрока = Объект.ТЧРасчет.Добавить();
				НоваяСтрока.Сотрудник = ВыбранныйЭлемент.Сотрудник;
				НоваяСтрока.РазрядКатегория=РазрядКатегория;
				НоваяСтрока.ФизическоеЛицо = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо;
				НоваяСтрока.ИНН = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо.ИНН;
				НоваяСтрока.ТабНомер = ВыбранныйЭлемент.Сотрудник.Код;
				НоваяСтрока.Должность = Должность;
				НоваяСтрока.ПодразделениеСотрудника=ПодразделениеСотрудника;
				
				//LMAL 21-08-2024_н
				//Получаем код физлица (который используется в РПТК)					
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				| ФизическиеЛицаДополнительныеРеквизиты.Значение КАК Значение
				|
				|ИЗ
				|	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
				|ГДЕ
				|	ФизическиеЛицаДополнительныеРеквизиты.Ссылка = &Ссылка
				|	И ФизическиеЛицаДополнительныеРеквизиты.Свойство.Наименование = &Свойство";
				Запрос.УстановитьПараметр("Ссылка",НоваяСтрока.ФизическоеЛицо);
				Запрос.УстановитьПараметр("Свойство","КодСотрудника (Физические лица)");	
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				КодФизЛица="";
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					КодФизЛица=ВыборкаДетальныеЗаписи.Значение;
				КонецЦикла;
				ПараметрыПоиска=Новый Структура;
				ПараметрыПоиска.Вставить("КемПродано",КодФизЛица);
				
				СтрокиЛичнаяВыручка=ТаблицаДанныеМотивации.НайтиСтроки(ПараметрыПоиска);
				//КемПродано,Сумма,СуммаДТМ,СуммаОптика,КоличествоИнтернет
				Если СтрокиЛичнаяВыручка.Количество()>0 Тогда
					НоваяСтрока.ЛичнаяВыручка=СтрокиЛичнаяВыручка[0].Сумма-СтрокиЛичнаяВыручка[0].СуммаДТМ-СтрокиЛичнаяВыручка[0].СуммаОптика;
					НоваяСтрока.ЛичнаяВыручкаПоДМ=СтрокиЛичнаяВыручка[0].СуммаДТМ;
					НоваяСтрока.ЛичнаяВыручкаОптика=СтрокиЛичнаяВыручка[0].СуммаОптика;
					НоваяСтрока.КолСобранныхУпаковок=СтрокиЛичнаяВыручка[0].КоличествоИнтернет;	
				КонецЕсли;	
				
				СтрокиЗМЗ=ТаблицаДанныеЗМЗ.НайтиСтроки(ПараметрыПоиска);
				//КемПродано,Количество60,Сумма60,Количество365,Сумма365
				Если СтрокиЗМЗ.Количество()>0 Тогда
					НоваяСтрока.КоличествоУпаковок=Окр(СтрокиЗМЗ[0].Количество60+СтрокиЗМЗ[0].Количество365,0);
					НоваяСтрока.СуммаПродажСрокиИЗМЗ=Окр(СтрокиЗМЗ[0].Сумма60+СтрокиЗМЗ[0].Сумма365,0);
				КонецЕсли;
				
				//Продвижение товаров
				//КемПродано,КоличествоОборот,СуммаОборот,СуммаСкидкиОборот
				
				СтрокиПродвижения=ТаблицаДанныеПродвиженияТоваров.НайтиСтроки(ПараметрыПоиска);
				Если СтрокиПродвижения.Количество()>0 Тогда
					НоваяСтрока.ФактПродажМУЗаМесяц=СтрокиПродвижения[0].КоличествоОборот;
					НоваяСтрока.СуммаПродажТоваровНаПродвижении=СтрокиПродвижения[0].СуммаОборот; 
				КонецЕсли;
				//LMAL 21-08-2024_к			
				Если ПодразделениеСотрудника=Объект.Подразделение тогда
					ПроверкаАкции=ПроверитьПодрАкция(ПодразделениеСотрудника) ; 
					НоваяСтрока.РазрядПодразделение=ПроверкаАкции;
				Иначе
					НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("Аптека основная",Истина);
					
					
				КонецЕсли;
				////ПроверкаНаУволенную
				//ПроверкаУв=ПроверитьНаУволенных(ВыбранныйЭлемент.Сотрудник);
				//Если ПроверкаУв.Количество()>0 тогда 
				//	НоваяСтрока.Уволенная = истина;
				//	НоваяСтрока.ЗапретРедактирования=истина; 
				//	Для каждого Эл из ПроверкаУв цикл
				//		ЗаполнитьЗначенияСвойств(НоваяСтрока,Эл);
				//	конеццикла;
				//конецесли;
				
				Прервать;
			конецесли;
		конеццикла;
	КонецЦикла;

	////LMAL 30-05-2024_к Получаем данные мотивации из РПТК
	//Объект.ПроданоУпаковокОптика=ПроданоУпаковокОптика;
	//Объект.ПроданоУпаковок=ПроданоУпаковок;
	//
	////Объект.ПланПоМУ=ПланПоМУ;   План МУ задается Маркетологами и не равен сумме проданных позиций с Маркетинговыми акциями
	////LMAL 30-05-2024_к

конецпроцедуры
&НаКлиенте
Процедура ЗаполнитьПоДаннымТабеля(Команда)
	// Вставить содержимое обработчика.
	ЗаполнитьТЧПоТабелю();
КонецПроцедуры

&НаКлиенте
Процедура ТЧРасчетЛичнаяВыручкаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
&НаСервере
Функция ПроверкаДоступности()
	//Отказпросмотра=ложь;
	//ТекущийПользователь=Пользователи.ТекущийПользователь();
	//Запрос = Новый Запрос;
	//запрос.УстановитьПараметр("Пользователь",ТекущийПользователь);
	//запрос.УстановитьПараметр("Роль","СтатусЗавершено");
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	1 
	//|ИЗ
	//|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	//|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	//|ГДЕ
	//|	ПрофилиГруппДоступаРоли.Роль.Имя = &Роль
	//|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	//
	//Результат=запрос.Выполнить().Выгрузить();
	//Если Результат.Количество()=0 и Объект.Статус=Перечисления.ВидыСтатусов.Завершено тогда
	//	ОтказПросмотра=истина;	
	//конецесли;
	//Возврат ОтказПросмотра;
	Возврат НЕ (РольДоступна("СтатусЗавершено") или РольДоступна("АдминистраторСистемы")) И Объект.Статус=Перечисления.ВидыСтатусов.Завершено;
	
конецфункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика. 
	ОтказПросмотра=ПроверкаДоступности();
	Если ОтказПросмотра=истина тогда
		//LMAL_24-01-2023_н
		//ЭтаФорма.Доступность=Ложь;
		Элементы.ТЧРасчет.ТолькоПросмотр=Истина;
		Элементы.Номер.ТолькоПросмотр=Истина;
		Элементы.Группа1.ТолькоПросмотр=Истина;
		Элементы.Группа2.ТолькоПросмотр=Истина;
		Элементы.Группа4.ТолькоПросмотр=Истина;
		Элементы.ТЧРасчетЗаполнитьПоДаннымТабеля.Доступность=Ложь;
		Элементы.ТЧРасчетЗаполнитьПоУволенным.Доступность=Ложь;
		Элементы.ТЧРасчетРассчитатьДанные.Доступность=Ложь;
	Иначе
		Элементы.ТЧРасчет.ТолькоПросмотр=Ложь;
		Элементы.Номер.ТолькоПросмотр=Ложь;
		Элементы.Группа1.ТолькоПросмотр=Ложь;
		Элементы.Группа2.ТолькоПросмотр=Ложь;
		Элементы.Группа4.ТолькоПросмотр=Ложь;
		Элементы.ТЧРасчетЗаполнитьПоДаннымТабеля.Доступность=Истина;
		Элементы.ТЧРасчетЗаполнитьПоУволенным.Доступность=Истина;
		Элементы.ТЧРасчетРассчитатьДанные.Доступность=Истина;
		//LMAL_24-01-2023_к
	конецесли;
	
	
КонецПроцедуры
Процедура ОбработатьИзменениеМесяцДатыНаСервере()
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Период", НачалоДня(Объект.МесяцДаты));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	ОбработкаДатыВыбора.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцДаты", "МесяцДатыСтрокой", Модифицированность);
	ОбработатьИзменениеМесяцДатыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцДатыСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОбработкаДатыВыбора.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцДаты", "МесяцДатыСтрокой", , Оповещение);
	
	
КонецПроцедуры 

&НаКлиенте
Процедура МесяцДатыСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеВыбрано Тогда 
		ОбработатьИзменениеМесяцДатыНаСервере();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбработкаДатыВыбора.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцДаты", "МесяцДатыСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбработкаДатыВыбора.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОбработкаДатыВыбора.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры
&НаСервере 
Функция ПроверкаСотрудникаНаПросчетКакУволенного(Сотрудник) 
	запрос=новый запрос;
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоАптекам.Подразделение КАК Подразделение,
	|	ДанныеПоАптекам.Сотрудник КАК Сотрудник,
	|	ДанныеПоАптекам.ДатаПо КАК ДатаПо,
	|	ДанныеПоАптекам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоАптекам.ДатаС КАК ДатаС,
	|	ДанныеПоАптекам.ПодразделениеРаботы КАК ПодразделениеРаботы,
	|	ДанныеПоАптекам.Должность КАК Должность,
	|	ДанныеПоАптекам.ВремяДень КАК ВремяДень,
	|	ДанныеПоАптекам.ВремяНочь КАК ВремяНочь,
	|	ДанныеПоАптекам.БонусЗаОценку КАК БонусЗаОценку,
	|	ДанныеПоАптекам.БонусСроковые КАК БонусСроковые,
	|	ДанныеПоАптекам.БонусМУ КАК БонусМУ,
	|	ДанныеПоАптекам.БонусПоДМ КАК БонусПоДМ,
	|	ДанныеПоАптекам.БонусЗаЛичнуюВыручку КАК БонусЗаЛичнуюВыручку,
	|	ДанныеПоАптекам.БонусЗаСовмещение КАК БонусЗаСовмещение,
	|	ДанныеПоАптекам.Статус КАК Статус,
	|	ДанныеПоАптекам.ЛичнаяВыручкаНеДТМ КАК ЛичнаяВыручкаНеДТМ,
	|	ДанныеПоАптекам.ЛичнаяВыручкаДТМ КАК ЛичнаяВыручкаДТМ,
	|	ДанныеПоАптекам.Уволенная КАК Уволенная
	|ИЗ
	|	РегистрСведений.ДанныеПоАптекам КАК ДанныеПоАптекам
	|ГДЕ
	|	ДанныеПоАптекам.Сотрудник = &Сотрудник
	|	И ДанныеПоАптекам.ДатаС МЕЖДУ &ДатаС И &ДатаПо
	|	И ДанныеПоАптекам.ДатаПо МЕЖДУ &ДатаС И &ДатаПо";
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
конецфункции
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	//МесяцНачисленияСтрокой=Формат(ТекущаяДата(), "ДФ='ММММ гггг'");;
	//ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "ПериодРегистрации", "МесяцУдержанияСтрокой");
	//ЗаполнениеОтбораВыбраннымМесяцем();
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСписокУволенных()
	запрос=новый запрос;
	запрос.УстановитьПараметр("ДатаС",ДатаУвС);
	запрос.УстановитьПараметр("ДатаПо",ДатаУвПо);
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст=                 "ВЫБРАТЬ
	|	Увольнение.Сотрудник КАК Сотрудник,
	|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Проведен = &Истина
	|	И Увольнение.ДатаУвольнения МЕЖДУ &ДатаС И &ДатаПо";
	Результат=запрос.Выполнить().Выгрузить(); 
	МасСотр=Новый Массив;
	Для каждого Эл из Результат цикл
		МасСотр.Добавить(Эл.Сотрудник);
	конеццикла;
	Объект.ТЧРасчет.Очистить();
	ТолькоРазрешенные = Истина;
	РезПоСотр=ПолучитьДанныеИзТабеляСотр(МасСотр);
	РезПоСотр.Свернуть("Сотрудник"); 
	
	//LMAL 21-08-2024_н Получаем данные мотивации из ЕРП
	
	//ТаблицаДанныеМотивации=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеМотивацииИзРПТК(Объект.Подразделение, НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо),"12");
	//ТаблицаДанныеМотивацииОптики=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеМотивацииИзРПТК(Объект.Подразделение, НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо),"36");
	
	//Получаем продвижение товаров, данные из ЕРП
	ТаблицаДанныеПродвиженияТоваров=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеПродвиженияТоваровИзЕРП(Объект.Подразделение ,НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо));
	//КемПродано,КоличествоОборот,СуммаОборот,СуммаСкидкиОборот
	ТаблицаДанныеМотивации=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеМотивацииИзЕРП(Объект.Подразделение ,НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо));
	//КемПродано,Сумма,СуммаДТМ,СуммаОптика,КоличествоИнтернет
	ТаблицаДанныеЗМЗ=ЗГ_ЗППроцедурыИФункцииСервер.ПолучитьДанныеЗМЗИзЕРП(Объект.Подразделение ,НачалоДня(Объект.ДатаС), КонецДня(Объект.ДатаПо));
	//КемПродано,Количество60,Сумма60,Количество365,Сумма365,Количество1095,Сумма1095
	//LMAL 21-08-2024_к
	
	Для Каждого ВыбранныйЭлемент Из РезПоСотр Цикл
		Проверить=Истина;
		Проверка=ЕстьСотрудникЧасы(ВыбранныйЭлемент.Сотрудник);
		Если Проверка.Количество()=0 тогда
			Продолжить;
			
		конецесли;
		
		Для каждого ДатаПроверки из Проверка цикл
			КадровыеДанные = "Должность,РазрядКатегория";
			
			МассивСотрудников = Новый Массив;
			
			МассивСотрудников.Добавить(ВыбранныйЭлемент.Сотрудник);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаПроверки.Период);
			//LMAL_Н 03-05-2023
			Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
				Должность = Строка.Должность; 
				//РазрядКатегория=Строка.Разрядкатегория;
			КонецЦикла;
			РазрядКатегория=Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
			
			МассивСотрудников1 = Новый Массив;
			
			МассивСотрудников1.Добавить(ВыбранныйЭлемент.Сотрудник.ГоловнойСотрудник);
			
			КадровыеДанные = "Подразделение,РазрядКатегория";
			КадровыеДанныеСотрудников1 = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников1, КадровыеДанные, ДатаПроверки.Период);
			Для Каждого Строка Из КадровыеДанныеСотрудников1 Цикл
				ПодразделениеСОтрудника = Строка.Подразделение;
				РазрядКатегория=Строка.Разрядкатегория;
			КонецЦикла;
			//LMAL_К
			//Если Должность=Справочники.Должности.НайтиПоНаименованию("Фармацевт") или Должность=Справочники.Должности.НайтиПоНаименованию("Старший фармацевт") тогда
			Если Должность=Справочники.Должности.НайтиПоНаименованию("Фармацевт") или 
				Должность=Справочники.Должности.НайтиПоНаименованию("Старший фармацевт") или 
				Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант") или
				Должность=Справочники.Должности.НайтиПоНаименованию("Продавец-консультант оптики")Тогда
				НоваяСтрока = Объект.ТЧРасчет.Добавить();
				НоваяСтрока.Сотрудник = ВыбранныйЭлемент.Сотрудник;
				НоваяСтрока.РазрядКатегория=РазрядКатегория;
				НоваяСтрока.ФизическоеЛицо = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо;
				НоваяСтрока.ИНН = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо.ИНН;
				НоваяСтрока.ТабНомер = ВыбранныйЭлемент.Сотрудник.Код;
				НоваяСтрока.Должность = Должность;
				НоваяСтрока.ПодразделениеСотрудника=ПодразделениеСотрудника;
				
				//LMAL 21-08-2024_н
				//Получаем код физлица (который используется в РПТК)					
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				| ФизическиеЛицаДополнительныеРеквизиты.Значение КАК Значение
				|
				|ИЗ
				|	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
				|ГДЕ
				|	ФизическиеЛицаДополнительныеРеквизиты.Ссылка = &Ссылка
				|	И ФизическиеЛицаДополнительныеРеквизиты.Свойство.Наименование = &Свойство";
				Запрос.УстановитьПараметр("Ссылка",НоваяСтрока.ФизическоеЛицо);
				Запрос.УстановитьПараметр("Свойство","КодСотрудника (Физические лица)");	
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				КодФизЛица="";
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					КодФизЛица=ВыборкаДетальныеЗаписи.Значение;
				КонецЦикла;
				ПараметрыПоиска=Новый Структура;
				ПараметрыПоиска.Вставить("КемПродано",КодФизЛица);
				
				СтрокиЛичнаяВыручка=ТаблицаДанныеМотивации.НайтиСтроки(ПараметрыПоиска);
				//КемПродано,Сумма,СуммаДТМ,СуммаОптика,КоличествоИнтернет
				Если СтрокиЛичнаяВыручка.Количество()>0 Тогда
					НоваяСтрока.ЛичнаяВыручка=СтрокиЛичнаяВыручка[0].Сумма-СтрокиЛичнаяВыручка[0].СуммаДТМ-СтрокиЛичнаяВыручка[0].СуммаОптика;
					НоваяСтрока.ЛичнаяВыручкаПоДМ=СтрокиЛичнаяВыручка[0].СуммаДТМ;
					НоваяСтрока.ЛичнаяВыручкаОптика=СтрокиЛичнаяВыручка[0].СуммаОптика;
					НоваяСтрока.КолСобранныхУпаковок=СтрокиЛичнаяВыручка[0].КоличествоИнтернет;
				КонецЕсли;	
				
				СтрокиЗМЗ=ТаблицаДанныеЗМЗ.НайтиСтроки(ПараметрыПоиска);
				//КемПродано,Количество60,Сумма60,Количество365,Сумма365
				Если СтрокиЗМЗ.Количество()>0 Тогда
					НоваяСтрока.КоличествоУпаковок=Окр(СтрокиЗМЗ[0].Количество60+СтрокиЗМЗ[0].Количество365,0);
					НоваяСтрока.СуммаПродажСрокиИЗМЗ=Окр(СтрокиЗМЗ[0].Сумма60+СтрокиЗМЗ[0].Сумма365,0);
				КонецЕсли;
				
				//Продвижение товаров
				//КемПродано,КоличествоОборот,СуммаОборот,СуммаСкидкиОборот
				
				СтрокиПродвижения=ТаблицаДанныеПродвиженияТоваров.НайтиСтроки(ПараметрыПоиска);
				Если СтрокиПродвижения.Количество()>0 Тогда
					НоваяСтрока.ФактПродажМУЗаМесяц=СтрокиПродвижения[0].КоличествоОборот;
					НоваяСтрока.СуммаПродажТоваровНаПродвижении=СтрокиПродвижения[0].СуммаОборот; 
				КонецЕсли;
				//LMAL 21-08-2024_к
				
				Если ПодразделениеСотрудника=Объект.Подразделение тогда
					ПроверкаАкции=ПроверитьПодрАкция(ПодразделениеСотрудника) ; 
					НоваяСтрока.РазрядПодразделение=ПроверкаАкции;
				иначе
					//LMAL_19-01-2023_н добавил точное совпадение
					НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("Аптека основная",Истина);  
					//НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("основная");
					//LMAL_19-01-2023_к
					
				конецесли;
				НоваяСтрока.ПервоначальныйРасчетПоУволенным=Истина; 
				// Если Уволенные=Истина тогда
				// НоваяСтрока.Уволенная=истина;
				//конецесли;
				Прервать;
			конецесли;
		конеццикла;
	КонецЦикла;	
	////LMAL 30-05-2024_к Получаем данные мотивации из РПТК
	//Объект.ПроданоУпаковокОптика=ПроданоУпаковокОптика;
	//Объект.ПроданоУпаковок=ПроданоУпаковок;
	////Объект.ПланПоМУ=ПланПоМУ; План МУ задается Маркетологами и не равен сумме проданных позиций с Маркетинговыми акциями
	////LMAL 30-05-2024_к
	
конецпроцедуры
&НаКлиенте
Процедура ЗаполнитьПоУволенным(Команда)
	// Вставить содержимое обработчика.
	Значение=ОткрытьФормуМодально("Документ.ВводДанныхПоАптеке.Форма.Форма"); 
	ДатаУвС=Значение.Параметр1;
	ДатаУвПо=Значение.Параметр2;
	ЗаполнитьСписокУволенных();
КонецПроцедуры

&НаКлиенте
Процедура ТЧРасчетПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьXML(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

//Для выбора месяца Н
&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ЗаполнениеОтбораВыбраннымМесяцем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ЗаполнениеОтбораВыбраннымМесяцем();
	
КонецПроцедуры


Процедура ЗаполнениеОтбораВыбраннымМесяцем()
	
	Модифицированность = Ложь;
	Объект.ДатаС=НачалоМесяца(ПериодРегистрации);
	Объект.ДатаПо=КонецМесяца(ПериодРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ДатаС", "МесяцНачисленияСтрокой");
КонецПроцедуры
 //Для выбора месяца К


