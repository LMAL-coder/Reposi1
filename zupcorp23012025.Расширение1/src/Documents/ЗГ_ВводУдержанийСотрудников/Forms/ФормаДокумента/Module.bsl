&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда // форма нового
		
		ЗначенияДляЗаполнения = Новый Структура;		
		ЗначенияДляЗаполнения.Вставить("МесяцРасчета",  "Объект.ПериодРегистрации");
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцУдержанияСтрокой");
		
	КонецЕсли;
	
	мТекущееПодразделение = Объект.Подразделение;
	
	УстановитьУсловноеОформление();
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Удержания");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Удержания.Уволен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(192,192,192));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцУдержанияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцУдержанияСтрокой", Модифицированность);	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцУдержанияСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцУдержанияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если мТекущееПодразделение <> Объект.Подразделение И Объект.Удержания.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодразделениеПриИзмененииЗавершение", ЭтаФорма), "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		мТекущееПодразделение = Объект.Подразделение;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.Подразделение = мТекущееПодразделение;
		Возврат;
	КонецЕсли;
	
	Объект.Удержания.Очистить();
	мТекущееПодразделение = Объект.Подразделение;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Объект.Удержания.Очистить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Удержания.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтаФорма), "Табличная часть будет очищена. Продолжить?",РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Результат = Документы.ЗГ_ВводУдержанийСотрудников.ПолучитьРезультатЗапросаФизическихЛицДляЗаполнения(Объект.Подразделение, Объект.ПериодРегистрации);
	
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Нет данных для заполнения!");
	КонецЕсли;
	
	ТаблицаДляЗаполнения = Результат.Выгрузить();
	
	Объект.Удержания.Загрузить(ТаблицаДляЗаполнения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСДопОтбором(Команда)
	
	Если Объект.Удержания.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСДопОтборомЗавершение", ЭтаФорма), "Табличная часть будет очищена. Продолжить?",РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
		
		ОткрытьФорму("Документ.ЗГ_ВводУдержанийСотрудников.Форма.ФормаЗаполнения", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСДопОтборомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Удержания.Очистить();
	Модифицированность = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	
	ОткрытьФорму("Документ.ЗГ_ВводУдержанийСотрудников.Форма.ФормаЗаполнения", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ДанныеВременногоХранилища") Тогда
		
		Если ЭтоАдресВременногоХранилища(ВыбранноеЗначение.ДанныеВременногоХранилища) Тогда
			ЗаполнитьДокументСДопОтборомНаСервере(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументСДопОтборомНаСервере(СтруктураОповещения)
	
	ТаблицаЗаполнения = ПолучитьИзВременногоХранилища(СтруктураОповещения.ДанныеВременногоХранилища);
	
	ДанныеМодифицированы = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаЗаполнения Цикл 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("Должность", СтрокаТаблицы.Должность);
		
		НайденныеСтроки = Объект.Удержания.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Удержания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Сумма = СтруктураОповещения.СуммаПоУмолчанию;
			ДанныеМодифицированы = Истина;
			
		Иначе
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НайденнаяСтрока.Сумма = СтруктураОповещения.СуммаПоУмолчанию;
				ДанныеМодифицированы = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 


&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Удержания, "ФизическоеЛицо"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьМассивФизЛицПоПодразделению()
	
	Результат = Документы.ЗГ_ВводУдержанийСотрудников.ПолучитьРезультатЗапросаФизическихЛицДляЗаполнения(Объект.Подразделение, Объект.ПериодРегистрации);
	
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Нет данных для заполнения!");
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаПримененияОтбора", КонецМесяца(Объект.ПериодРегистрации));
	Отбор.Вставить("ВАрхиве", Ложь);
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Отбор.Вставить("Ссылка", ПолучитьМассивФизЛицПоПодразделению());
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	КадровыйУчетКлиент.ВыбратьФизическихЛицОрганизации(Элементы.Удержания, , Истина, , АдресСпискаПодобранныхСотрудников(), , ПараметрыОткрытия);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(ВыбранныеФизическиеЛица)
	
	ПараметрыЗапросаКадровыхДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапросаКадровыхДанных.НачалоПериода = КонецМесяца(Объект.ПериодРегистрации);
	ПараметрыЗапросаКадровыхДанных.ОкончаниеПериода = КонецМесяца(Объект.ПериодРегистрации);	
	ПараметрыЗапросаКадровыхДанных.СписокФизическихЛиц = ВыбранныеФизическиеЛица;
	Отборы = Новый Массив;
	СписокВидовЗанятостей = Новый Массив;
	СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	Отборы.Добавить(Новый Структура ("ЛевоеЗначение, ВидСравнения, ПравоеЗначение, ОтносительныйПуть", "ВидЗанятости", "В", СписокВидовЗанятостей, Истина));
	ПараметрыЗапросаКадровыхДанных.Отборы = Отборы;
	
	ПараметрыЗапросаКадровыхДанных.КадровыеДанные = "Подразделение, Должность, ВидЗанятости";
	ТаблицаКадровыхДанных = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапросаКадровыхДанных);
	
	Для Каждого СтрокаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		
		Отбор = Новый Структура("ФизическоеЛицо", СтрокаКадровыхДанных.ФизическоеЛицо);
		Если Объект.Удержания.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Удержания.Добавить();
			НоваяСтрока.ФизическоеЛицо = СтрокаКадровыхДанных.ФизическоеЛицо;					
			НоваяСтрока.Подразделение = СтрокаКадровыхДанных.Подразделение;
			НоваяСтрока.Должность = СтрокаКадровыхДанных.Должность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКадровыеДанныеФизическогоЛицаВСтроке(ИдентификаторСтроки) 
	
	СтрокаТабличнойЧасти = Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрыЗапросаКадровыхДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапросаКадровыхДанных.НачалоПериода = КонецМесяца(Объект.ПериодРегистрации);
	ПараметрыЗапросаКадровыхДанных.ОкончаниеПериода = КонецМесяца(Объект.ПериодРегистрации);	
	ПараметрыЗапросаКадровыхДанных.СписокФизическихЛиц = СтрокаТабличнойЧасти.ФизическоеЛицо;
	Отборы = Новый Массив;
	СписокВидовЗанятостей = Новый Массив;
	СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	Отборы.Добавить(Новый Структура ("ЛевоеЗначение, ВидСравнения, ПравоеЗначение, ОтносительныйПуть", "ВидЗанятости", "В", СписокВидовЗанятостей, Истина));
	ПараметрыЗапросаКадровыхДанных.Отборы = Отборы;
	
	ПараметрыЗапросаКадровыхДанных.КадровыеДанные = "Подразделение, Должность, ВидЗанятости";
	ТаблицаКадровыхДанных = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапросаКадровыхДанных);
	
	Для Каждого СтрокаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		
		СтрокаТабличнойЧасти.Подразделение = СтрокаКадровыхДанных.Подразделение;
		СтрокаТабличнойЧасти.Должность = СтрокаКадровыхДанных.Должность;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизическоеЛицоПриИзменении(Элемент)
	
	ЗаполнитьКадровыеДанныеФизическогоЛицаВСтроке(Элементы.Удержания.ТекущаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуУдержания(Команда)
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ЗаполнитьСуммуУдержанияЗавершение", ЭтаФорма), 0,"Введите сумму удержания",15,2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуУдержанияЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если НЕ Число = Неопределено Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Удержания Цикл
			
			СтрокаТабличнойЧасти.Сумма = Число;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


#Область СтандартныеПодсистемыПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьИзExcel(Команда)
	Значение=ОткрытьФормуМодально("Документ.ЗГ_ВводУдержанийСотрудников.Форма.ФормаЗагрузкиИзExcel"); 
	СтолбецТабельныйНомер=ИндексКолонкиПоИмени(Значение.Параметр1);
	СтолбецСуммаУдержания=ИндексКолонкиПоИмени(Значение.Параметр2);
	СтрокаНачала=(Значение.Параметр3);
	СтрокаКонец=(Значение.Параметр4);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла="";
	//Фильтр = "Excel(*.xls)|*.xls|*.ods|*.ods";
	//ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл"; 
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу =ДиалогОткрытияФайла.ПолноеИмяФайла; 
		//Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	Иначе
		Предупреждение(НСтр("ru = 'Файл(ы) не выбран!'; en = 'File(s) not selected!'"));
	КонецЕсли;
	ЗагрузитьОбъектыНаКлиенте(СтолбецТабельныйНомер,СтолбецСуммаУдержания,СтрокаНачала,СтрокаКонец);
	
КонецПроцедуры
&НаКлиенте
Функция ПолучитьДокументОО()
	
	Попытка
		ServiceManager                 = Новый COMОбъект("com.sun.star.ServiceManager");
	Исключение
		Сообщить( "программа OpenOffice\LibreOffice не установлена на данном компьютере!");
		Возврат Неопределено;
	КонецПопытки;
	
	Desktop                            = ServiceManager.createInstance("com.sun.star.frame.Desktop");
	Свойства                           = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name                      = "AsTemplate";
	Свойства.Value                     = Истина;
	Args                               = Новый COMSafeArray("VT_VARIANT", 2);
	Args.SetValue(0, Свойства);
	Свойства1                          = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства1.Name                     = "Hidden";
	Свойства1.Value                    = Истина;
	Args.SetValue(1,Свойства1);
	
	//Приводим файл к виду_
	ПутьКФайлуПрив = СтрЗаменить(ПутьКФайлу," ","%20");
	ПутьКФайлуПрив = СтрЗаменить(ПутьКФайлуПрив,"\","/");
	ПутьКФайлуПрив = "file:/" + "/localhost/" + ПутьКФайлуПрив;
	
	Document                           = Desktop.LoadComponentFromURL(ПутьКФайлуПрив, "_blank", 0, Args);
	
	Возврат Document;
КонецФункции // ПолучитьДокументОО()
&НаКлиенте
Процедура ЗагрузитьОбъектыНаКлиенте(СтолбецТабельныйНомер,СтолбецСуммаУдержания,СтрокаНачала,СтрокаКонец)
	Объект.Удержания.Очистить();
	
	Document                           = ПолучитьДокументОО();	
	Если Document = Неопределено Тогда Возврат КонецЕсли;
	Sheets                             = Document.getSheets();
	Sheet                              = Sheets.getByIndex(1-1);
	
	//СтруктураКолонок                   = Новый Структура();
	//ТекКолонка                         = 0;
	//Пока ТекКолонка < 200 Цикл
	//	ИмяКолонки                     = Sheet.GEtCellByPosition(ТекКолонка, 0).getText().String();
	//	ИмяКолонки                     = СтрЗаменить(ИмяКолонки," ", "");
	//	Если ИмяКолонки <> "" Тогда			
	//		Если Элементы.СписокКолонок.ПодчиненныеЭлементы.Найти("СписокКолонок"+ИмяКолонки) <> Неопределено Тогда
	//			СтруктураКолонок.Вставить("_"+Строка(ТекКолонка), ИмяКолонки); 
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	ТекКолонка                     = ТекКолонка + 1;
	//КонецЦикла;
	
	//СписокКолонок.Очистить();
	//Если СтруктураКолонок.Количество() > 0 Тогда
	ТекСтрока                      = СтрокаНачала-1;
	//КолПустыхСтрокВКонце           = 0;
	//	НомерПП                        = 1;
	//Пока КолПустыхСтрокВКонце <> 100 Цикл
		//		Если ТекСтрока > (СтрокаОкончания - 1) Тогда Прервать КонецЕсли;
		//		НСТр                       = СписокКолонок.Добавить();
		//ПустаяСтрока               = Истина;
		//		Для каждого Стр Из СтруктураКолонок Цикл 
	Пока ТекСтрока < СтрокаКонец Цикл
		ТабельныйНомер = Sheet.GEtCellByPosition(СтолбецТабельныйНомер, ТекСтрока).getText().String();
		Сумма= Sheet.GEtCellByPosition(СтолбецСуммаУдержания, ТекСтрока).getText().String();
		Если ЗначениеЗаполнено(ТабельныйНомер) и ЗначениеЗаполнено(Сумма) Тогда
			//ПустаяСтрока       = Ложь;
			
			Если ТабельныйНомер = "NULL" Тогда ТабельныйНомер = "" КонецЕсли;
			Если Сумма = "NULL" Тогда Сумма = 0 КонецЕсли;
			ЗаполнитьСтрокиУдержанийНаСервере(ТабельныйНомер,Сумма)			
		Иначе
			Сообщить("Табельный номер или сумма не заполнены в строке - "+Строка(ТекСтрока+1));
		КонецЕсли;
		
		//		КонецЦикла;
		ТекСтрока                  = ТекСтрока + 1;
		//Если ПустаяСтрока Тогда
		//	//			СписокКолонок.Удалить(НСТр);
		//	КолПустыхСтрокВКонце   = КолПустыхСтрокВКонце + 1;
		//	//		Иначе
		//	//			НСТр.НомерПП           = НомерПП;
		//	//			НомерПП                = НомерПП + 1;
		//КонецЕсли;
	КонецЦикла;
	//КонецЕсли;
	
	Document.close(true);
КонецПроцедуры
Процедура ЗаполнитьСтрокиУдержанийНаСервере(ТабельныйНомер,СуммаУдержания)
	
	
	//Находим физлицо по табельному
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Код = &Код
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.ФизическоеЛицо";
	Запрос.УстановитьПараметр("Код",ТабельныйНомер);
	Выборка=Запрос.Выполнить().Выбрать();
	ФизЛицо=Справочники.ФизическиеЛица.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		ФизЛицо=Выборка.ФизическоеЛицо;
	КонецЦикла;
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ПараметрыЗапросаКадровыхДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыЗапросаКадровыхДанных.НачалоПериода = КонецМесяца(Объект.ПериодРегистрации);
		ПараметрыЗапросаКадровыхДанных.ОкончаниеПериода = КонецМесяца(Объект.ПериодРегистрации);	
		ПараметрыЗапросаКадровыхДанных.СписокФизическихЛиц = ФизЛицо;
		Отборы = Новый Массив;
		СписокВидовЗанятостей = Новый Массив;
		СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
		СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.Совместительство);
		Отборы.Добавить(Новый Структура ("ЛевоеЗначение, ВидСравнения, ПравоеЗначение, ОтносительныйПуть", "ВидЗанятости", "В", СписокВидовЗанятостей, Истина));
		ПараметрыЗапросаКадровыхДанных.Отборы = Отборы;
		
		ПараметрыЗапросаКадровыхДанных.КадровыеДанные = "Подразделение, Должность, ВидЗанятости";
		ТаблицаКадровыхДанных = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапросаКадровыхДанных);
		
		Сумма=СуммаУдержания;
		Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Должность=Справочники.Должности.ПустаяСсылка();
		
		Для Каждого СтрокаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
			Если СтрокаКадровыхДанных.ВидЗанятости=Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				Подразделение=СтрокаКадровыхДанных.Подразделение;  //Первостепенно основное место работы
				Должность= СтрокаКадровыхДанных.Должность;
				Прервать;
			ИначеЕсли СтрокаКадровыхДанных.ВидЗанятости=Перечисления.ВидыЗанятости.Совместительство Тогда
				Подразделение=СтрокаКадровыхДанных.Подразделение;  //внешнее соместительство
				Должность= СтрокаКадровыхДанных.Должность;
			КонецЕсли
		КонецЦикла;
		
		//Создаем строку удержания
		Если Сумма<>0 Тогда	
			НоваяСтрока = Объект.Удержания.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизЛицо;					
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Должность = Должность;
			НоваяСтрока.Сумма=Сумма;
		Иначе
			Сообщить(Строка(ФизЛицо)+" - Строка не добавлена, сумма=0");
		КонецЕсли;
	Иначе
		Сообщить("Физ.лицо не найдено по табельному номеру - "+Строка(ТабельныйНомер));	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПривестиФайлКУРЛ()
	
	ПутьКФайлуПрив = СтрЗаменить(ПутьКФайлу," ","%20");
	ПутьКФайлуПрив = СтрЗаменить(ПутьКФайлуПрив,"\","/");
	ПутьКФайлуПрив = "file:/" + "/localhost/" + ПутьКФайлуПрив;
	Возврат ПутьКФайлуПрив;
	
Конецфункции
Функция ИндексКолонкиПоИмени(ИмяКолонки)
	КолСимволовВАлфавите = 26;
	Смещение             = КодСимвола("A", 1);
	КодСим               = КодСимвола(ИмяКолонки, 1);
	ПозСим               = КодСим - Смещение;
	
	Если СтрДлина(ИмяКолонки)=1 Тогда
		Возврат ПозСим;
	КонецЕсли;	
	
	Уровень              = ПозСим + 1;
	КодСим               = КодСимвола(ИмяКолонки, 2);
	ПозСим               = КодСим - Смещение;
	
	Возврат ПозСим + Уровень*КолСимволовВАлфавите;
КонецФункции

&НаСервере
Процедура ЗаполнитьИзТекстовогоФайлаНаСервере(ПотокСтрок)
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаДокумента.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаДокумента.Колонки.Добавить("ТабельныйНомер", Новый ОписаниеТипов("Строка", ,,, Новый КвалификаторыСтроки(200)));
	ТаблицаДокумента.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	// Последовательное чтение строк текстового файла
	КоличествоСтрок = ПотокСтрок.КоличествоСтрок();
	Для Строка = 1 По КоличествоСтрок Цикл
		
		// Обработка нажатия Ctrl + Break
		//ОбработкаПрерыванияПользователя();
		
		// Чтение строки из файла тхт / csv
		СтрокаИзФайла = ПотокСтрок.ПолучитьСтроку(Строка);
		
		// Разбор строки в массив, используя в качествен символа-разделителя "|"
		МассивСтрок = СтрРазделить(СтрокаИзФайла,"|");
		
		// Добавить данные в табличную часть экранной формы
		Попытка
			Стр=ТаблицаДокумента.Добавить();
			Стр.ФИО	 = МассивСтрок[0];
			Стр.Код = МассивСтрок[1];
			Стр.ТабельныйНомер = МассивСтрок[2];
			Стр.Сумма = МассивСтрок[3];
		Исключение
			Сообщить("Ошибка, не удалось разобрать строку: "+СтрокаИзФайла);
		КонецПопытки;
		
		// Отобразить информацию о ходе выполнения обработки
		//Состояние("Обработка строки файла : "		+ "строка " + Строка + " из " + КоличествоСтрок);
	КонецЦикла;
	
	Объект.Удержания.Очистить();
	
	Для каждого Стр Из ТаблицаДокумента Цикл
		ТабельныйНомер=Стр.ТабельныйНомер;
		Если ЗначениеЗаполнено(ТабельныйНомер) Тогда
			//Находим физлицо по табельному
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Код = &Код
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.ФизическоеЛицо";
			Запрос.УстановитьПараметр("Код",ТабельныйНомер);
			Выборка=Запрос.Выполнить().Выбрать();
			ФизЛицо=Справочники.ФизическиеЛица.ПустаяСсылка();
			Пока Выборка.Следующий() Цикл
				ФизЛицо=Выборка.ФизическоеЛицо;
			КонецЦикла;
			Если ЗначениеЗаполнено(ФизЛицо) Тогда
				ПараметрыЗапросаКадровыхДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
				ПараметрыЗапросаКадровыхДанных.НачалоПериода = КонецМесяца(Объект.ПериодРегистрации);
				ПараметрыЗапросаКадровыхДанных.ОкончаниеПериода = КонецМесяца(Объект.ПериодРегистрации);	
				ПараметрыЗапросаКадровыхДанных.СписокФизическихЛиц = ФизЛицо;
				Отборы = Новый Массив;
				СписокВидовЗанятостей = Новый Массив;
				СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
				СписокВидовЗанятостей.Добавить(Перечисления.ВидыЗанятости.Совместительство);
				Отборы.Добавить(Новый Структура ("ЛевоеЗначение, ВидСравнения, ПравоеЗначение, ОтносительныйПуть", "ВидЗанятости", "В", СписокВидовЗанятостей, Истина));
				ПараметрыЗапросаКадровыхДанных.Отборы = Отборы;
				
				ПараметрыЗапросаКадровыхДанных.КадровыеДанные = "Подразделение, Должность, ВидЗанятости";
				ТаблицаКадровыхДанных = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапросаКадровыхДанных);
				
				Сумма=Стр.Сумма;
				Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				Должность=Справочники.Должности.ПустаяСсылка();
				
				Для Каждого СтрокаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
					Если СтрокаКадровыхДанных.ВидЗанятости=Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
						Подразделение=СтрокаКадровыхДанных.Подразделение;  //Первостепенно основное место работы
						Должность= СтрокаКадровыхДанных.Должность;
						Прервать;
					ИначеЕсли СтрокаКадровыхДанных.ВидЗанятости=Перечисления.ВидыЗанятости.Совместительство Тогда
						Подразделение=СтрокаКадровыхДанных.Подразделение;  //внешнее соместительство
						Должность= СтрокаКадровыхДанных.Должность;
					КонецЕсли
				КонецЦикла;
				
				//Создаем строку удержания
				Если Сумма<>0 Тогда	
					НоваяСтрока = Объект.Удержания.Добавить();
					НоваяСтрока.ФизическоеЛицо = ФизЛицо;					
					НоваяСтрока.Подразделение = Подразделение;
					НоваяСтрока.Должность = Должность;
					НоваяСтрока.Сумма=Сумма;
				Иначе
					Сообщить(Строка(ФизЛицо)+" - Строка не добавлена, сумма=0");
				КонецЕсли;
			Иначе
				Сообщить("Физ.лицо не найдено по табельному номеру - "+Строка(ТабельныйНомер));	
			КонецЕсли;
		Иначе
			Сообщить("Табельный номер - не заполнен в строке - "+Строка(Стр.ФИО)+" | "+ Строка(Стр.Код)+" | "+Строка(Стр.ТабельныйНомер)+" | "+Строка(Стр.Сумма));
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзТекстовогоФайла(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла="";
	//Фильтр = "Excel(*.xls)|*.xls|*.ods|*.ods";
	//ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл"; 
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу =ДиалогОткрытияФайла.ПолноеИмяФайла; 
		//Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	Иначе
		Предупреждение(НСтр("ru = 'Файл(ы) не выбран!'; en = 'File(s) not selected!'"));
	КонецЕсли;
	//ИмяФ="E:\temp\09\ДО2_01082024_31082024.csv";
	//ИмяФ=СтрЗаменить(ИмяФ,"\","/");
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьКФайлу);
	КоличествоСтрок = Текст.КоличествоСтрок();
	ЗаполнитьИзТекстовогоФайлаНаСервере(Текст);
КонецПроцедуры
	
Функция ПолучитьПотокЧтенияСтрок(ИмяФайла)
	Попытка
		// Используется для доступа к параметрам файлов или каталогов. 
		//ИмяФайла="E:\temp\09\ДО2_01082024_31082024.csv";
		ТекстовыйФайл = Новый Файл(ИмяФайла);
		//Если ТекстовыйФайл.Существует() = Ложь Тогда
		//	Сообщить("Файла "+ИмяФайла+" не существует!");
		//	Возврат Неопределено;
		//КонецЕсли;
		
		// Текстовый документ предназначен для работы с текстами. 
		// Объект позволяет получать и сохранять текст в файле, 
		// работать со строками
		ПотокЧтенияСтрок = Новый ТекстовыйДокумент();
		ПотокЧтенияСтрок.Прочитать(ТекстовыйФайл);
	Исключение
		Сообщить("Файл не прочитан.", СтатусСообщения.Внимание);
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	// Возвращает текст, извлеченный из файла
	Возврат ПотокЧтенияСтрок;
	
КонецФункции // ПолучитьПотокЧтенияСтрок
#КонецОбласти

