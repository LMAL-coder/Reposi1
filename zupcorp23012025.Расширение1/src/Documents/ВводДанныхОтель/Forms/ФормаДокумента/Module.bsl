&НаСервере
Функция ПолучитьДолжностьСотрудника(ВыбранноеЗначение) 
	ДатаСрезаИнформации = Объект.ДатаС;
	ТолькоРазрешенные = Истина;
	КадровыеДанные = "Должность";
	
	МассивСотрудников = Новый Массив;
	
	МассивСотрудников.Добавить(ВыбранноеЗначение);
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаСрезаИнформации);
	
	Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
		Должность = Строка.Должность;
	КонецЦикла;
	Возврат Должность;
КонецФункции

&НаСервере
Функция ТЧОбработкаВыбора(ВыбранноеЗначение)
	МассивПоСотруднику=Новый Массив();
	ТабНомер=ВыбранноеЗначение.Код; 
	МассивПоСотруднику.Добавить(ТабНомер);
	ИНН=ВыбранноеЗначение.ФизическоеЛицо.ИНН;
	МассивПоСотруднику.Добавить(ИНН);
	Должность=ПолучитьДолжностьСотрудника(ВыбранноеЗначение);
	МассивПоСотруднику.Добавить(Должность);
	
	Возврат МассивПоСотруднику; 
Конецфункции
&НаСервере
Функция ПолучитьРазмерПремии(Бонус,ВидПремии)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Бонус",Бонус);
	запрос.УстановитьПараметр("ВидПремии",ВидПремии);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.Текст="ВЫБРАТЬ
	|	ДПО_ПоказателиПремийСрезПоследних.ВеличинаПремии КАК ВеличинаПремии
	|ИЗ
	|	РегистрСведений.ДПО_ПоказателиПремий.СрезПоследних(&ДатаС, ВидыПремий = &ВидПремии) КАК ДПО_ПоказателиПремийСрезПоследних
	|ГДЕ
	|	&Бонус МЕЖДУ ДПО_ПоказателиПремийСрезПоследних.ДиапазонС И ДПО_ПоказателиПремийСрезПоследних.ДиапазонПо";
	Результат=запрос.Выполнить().Выгрузить();
	Для каждого Эл из Результат цикл
		БонусМУ=Эл.ВеличинаПремии;
	конеццикла;
	Возврат БонусМУ;
конецфункции

&НаКлиенте
Процедура ТЗСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	МассивПоСотруднику=ТЧОбработкаВыбора(ВыбранноеЗначение);
	СтрокаТаблицы = ЭтаФорма.Элементы.ТЧРасчет.ТекущиеДанные; 
	
	//// Ввести значения в ячейки строки. 
	СтрокаТаблицы.ТабНомер = МассивПоСотруднику[0];
	СтрокаТаблицы.ИНН = МассивПоСотруднику[1];
	СтрокаТаблицы.Должность = МассивПоСотруднику[2];
	//СтрокаТаблицы.ДатаОтгрузки = СтрокаТаблицы.Заказ.ДатаОтгрузки; 
КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеИзТабеля()
	запрос=новый запрос;
	запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст="ВЫБРАТЬ     
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ПериодРегистрации МЕЖДУ &ДатаС И &ДатаПо
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Проведен = &истина";
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		запрос.Текст=запрос.Текст+"
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Подразделение = &Подразделение";
	конецесли;
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
конецфункции
&НаСервере
Функция ПолучитьДанныеИзТабеля2Мес()
	//Берем Ссыки за текущий и прошлый месяц, чтобы учесть переходящий график ДобавитьМесяц(Объект.ДатаС,-1) 
	запрос=новый запрос;
	запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	запрос.УстановитьПараметр("ДатаС",ДобавитьМесяц(Объект.ДатаС,-1));
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст="ВЫБРАТЬ     
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ПериодРегистрации МЕЖДУ &ДатаС И &ДатаПо
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Проведен = &истина";
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		запрос.Текст=запрос.Текст+"
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Подразделение = &Подразделение";
	конецесли;
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции


&НаСервере
Функция ПолучитьДанныеИзТабеляСотр(Сотрудник)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст="ВЫБРАТЬ     
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ПериодРегистрации МЕЖДУ &ДатаС И &ДатаПо
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Проведен = &истина";
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		запрос.Текст=запрос.Текст+"
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Подразделение = &Подразделение";
	конецесли;
	Если ЗначениеЗаполнено(Сотрудник) тогда
		запрос.Текст=запрос.Текст+"
		//LMAL_05-03-2023_Н
		//|И	ТабельУчетаРабочегоВремениДанныеОВремени.СОтрудник В (&Сотрудник)";
		|И	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник.ГоловнойСотрудник В (&Сотрудник)";
		//LMAL_05-03-2023_К
	конецесли;
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;	
конецфункции
&НаСервере
Функция ПроверкаРаботыСотрудниковВАптеке()
	Проверка=истина;
	МасСотрудников=ТЗ.Выгрузить(,"Сотрудник");
	ВремяПоТабелю=ПолучитьДанныеИзТабеля(); 
	Для каждого Эл из МасСотрудников цикл
		РезПоиска=ВремяПоТабелю.Найти(Эл.Сотрудник,"Сотрудник");
		Если РезПоиска = Неопределено Тогда
			Сообщить("Такого сотрудника нет в табеле -"+Строка(Эл.Сотрудник));
			Проверка=Ложь;
		конецесли;
	конеццикла;
	
	Возврат Проверка;
	
конецфункции
&НаСервере
Процедура ЗаполнитьТЗ(ВыбранноеЗначение)
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.ТЧРасчет.Добавить();
		НоваяСтрока.Сотрудник = ВыбранныйЭлемент;
		НоваяСтрока.ИНН = ВыбранныйЭлемент.ФизическоеЛицо.ИНН;
		НоваяСтрока.ТабНомер = ВыбранныйЭлемент.Код;
		ТолькоРазрешенные = Истина;
		
		ДатаСрезаИнформации = Объект.ДатаС;
		
		КадровыеДанные = "Должность";
		
		МассивСотрудников = Новый Массив;
		
		МассивСотрудников.Добавить(ВыбранныйЭлемент);
		
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		
		ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаСрезаИнформации);
		
		Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
			Должность = Строка.Должность;
		КонецЦикла;
		НоваяСтрока.Должность = Должность;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧ()
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) тогда
		Сообщить("Не заполнены подразделение для расчета"); 
	Иначе
		Если  НЕ ЗначениеЗаполнено(Объект.ДатаС) или НЕ ЗначениеЗаполнено(Объект.ДатаПо) тогда
			Сообщить("Не заполнены даты периода для расчета");
		иначе
			Если НЕ ЗначениеЗаполнено(Объект.ПланПоВыручке)или НЕ ЗначениеЗаполнено(Объект.ФактПоВыручке)  тогда
				Сообщить("Не заполнены показатели для расчета");
			Иначе
				РезультатПроверки=ПроверкаРаботыСотрудниковВАптеке();
				Если РезультатПроверки=ложь тогда
					Возврат;
				конецесли;
			КонецЕсли;
		КонецЕсли;	
		
		
		ДокументыТабеля=ПолучитьДанныеИзТабеля2Мес();
		Регистраторы=ДокументыТабеля.ВыгрузитьКолонку("Ссылка");
		ВидыВремени=Новый Массив;
		ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
		ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы"));
		Сотрудники=Объект.ТЧРасчет.Выгрузить(,"Сотрудник");
		
		запрос=новый запрос;
		запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
		запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
		запрос.УстановитьПараметр("Сотрудники",Сотрудники);
		запрос.УстановитьПараметр("ВидыВремени",ВидыВремени);
		запрос.УстановитьПараметр("Регистраторы",Регистраторы);
		
		
		запрос.Текст="ВЫБРАТЬ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы КАК Часы,
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		|ГДЕ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)";
		//РезультатТ=запрос.Выполнить().Выгрузить();
		ВремяПоСотр=запрос.Выполнить().Выгрузить();
		//ВремяПоСотр=РезультатТ.Скопировать();
		//ВремяПоСотр=запрос.Выполнить().Выгрузить();
		ВремяПоСотр.Свернуть("Сотрудник,ВидУчетаВремени","Часы");
		
		запрос1=новый запрос;
		запрос1.УстановитьПараметр("ДатаС",Объект.ДатаС);
		запрос1.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
		запрос1.УстановитьПараметр("Сотрудники",Сотрудники);
		//запрос1.УстановитьПараметр("СотрудникиОптики",СотрудникиОптики);
		запрос1.УстановитьПараметр("ВидыВремени",ВидыВремени);
		запрос1.УстановитьПараметр("Регистраторы",Регистраторы);
		запрос1.Текст="ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы),0) КАК ЧасыВсего
		|ИЗ
		|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		|ГДЕ
		|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудники)
		|";
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЕСТЬNULL(СУММА(ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы),0) КАК ЧасыВсегоОпитка
		//|ИЗ
		//|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
		//|ГДЕ
		//|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
		//|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&СотрудникиОптики)";
		Результат1=запрос1.Выполнить();
		
		ВремяВсего=0;
		//ВремяВсегоОптики=0;
		Если Не Результат1.Пустой() Тогда
			Выборка1=Результат1.Выбрать();
			Пока Выборка1.Следующий() Цикл
				ВремяВсего=Выборка1.ЧасыВсего;
			КонецЦикла; 
		КонецЕсли;
		
		//Если Не МассивРезультатов[1].Пустой() Тогда
		//	Выборка1=МассивРезультатов[1].Выбрать();
		//	Пока Выборка1.Следующий() Цикл
		//		ВремяВсегоОптики=Выборка1.ЧасыВсегоОпитка;
		//	КонецЦикла;
		//КонецЕсли;
		//LMAL_03-08-2023_к
		
		ВремяИтог=ВремяПоСотр.Скопировать();
		ВремяИтог.Свернуть("Сотрудник","Часы"); 
		Для каждого Эл из Объект.ТЧРасчет цикл
			//Минимум=0;
			//Максимум=0;
			Коэффициент=1;
			СтоимостьДневногоЧаса=0;
			СтоимостьНочногоЧаса=0;
			СтоимостьЧасаKPI=0;
			запрос=новый запрос;
			запрос.УстановитьПараметр("Дата",Объект.ДатаПо);
			запрос.УстановитьПараметр("Должность",Эл.Должность);
			запрос.УстановитьПараметр("КатегорияСотрудник",Эл.РазрядКатегория);
			//запрос.УстановитьПараметр("КатегорияАптеки",Эл.РазрядПодразделение);
			запрос.Текст="ВЫБРАТЬ
			|	ПоказателиОтельСрезПоследних.Коэффициент КАК Коэффициент,
			|	ПоказателиОтельСрезПоследних.СтоимостьДневногоЧаса КАК СтоимостьДневногоЧаса,
			|	ПоказателиОтельСрезПоследних.СтоимостьНочногоЧаса КАК СтоимостьНочногоЧаса,
			|	ПоказателиОтельСрезПоследних.СтоимостьЧасаKPI КАК СтоимостьЧасаKPI
			|ИЗ
			|	РегистрСведений.ПоказателиОтель.СрезПоследних(
			|			&Дата,
			|			Должность = &Должность
			|				И КатегорияСотрудник = &КатегорияСотрудник) КАК ПоказателиОтельСрезПоследних";
			РезультатНормативы=запрос.Выполнить();//.Выгрузить();
			Если РезультатНормативы.Пустой() Тогда
				Сообщить("Не найдены параметры в настройках Показатели по должностям для: Должность="+Эл.Должность+", РазрядКатегория="+Эл.РазрядКатегория+", НаДату="+Объект.ДатаС);
			Иначе
				РезультатНормативы1=РезультатНормативы.Выгрузить();
				Для каждого Эл1 из РезультатНормативы1 цикл
					Коэффициент=Эл1.Коэффициент;
					СтоимостьДневногоЧаса=Эл1.СтоимостьДневногоЧаса;
					СтоимостьНочногоЧаса=Эл1.СтоимостьНочногоЧаса;
					СтоимостьЧасаKPI=Эл1.СтоимостьЧасаKPI;
				КонецЦикла;
			КонецЕсли;
			
			
			Если Эл.Уволенная=истина тогда
				ВводДанных=ПроверитьНаУволенных(Эл.Сотрудник);
				Для каждого ЭлС из ВводДанных цикл
					ЗаполнитьЗначенияСвойств(Эл,ЭлС);
					Эл.ВыполнениеПланаKPIВзвешен=ЭлС.ПоказательKPI1;
					Эл.КачественныйПоказательKPIВзвешен=ЭлС.ПоказательKPI2; //границы учитываются
					Эл.ИтогоKPI=ЭлС.ПремияKPI;
					
				КонецЦикла;
			Иначе
				ВремяИтогПоСотр=0;
				ВремяИтогПоСотр= ВремяИтог.НайтиСтроки(Новый Структура("Сотрудник",Эл.Сотрудник));
				
				//Эл.Минимум=Минимум;
				//Эл.Максимум=Максимум; 
				Попытка
					Эл.ОтработаноВсего=ВремяИтогПоСотр[0].Часы;
				Исключение
				КонецПопытки;
				
				ВремяДень= ВремяПоСотр.НайтиСтроки(Новый Структура("Сотрудник,ВидУчетаВремени",Эл.Сотрудник,Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка")));
				Попытка
					Эл.ВремяДень=ВремяДень[0].Часы; 
				Исключение
				КонецПопытки;
				ВремяНочь= ВремяПоСотр.НайтиСтроки(Новый Структура("Сотрудник,ВидУчетаВремени",Эл.Сотрудник,Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы")));
				
				Попытка
					Эл.ВремяНочь=ВремяНочь[0].Часы; 
				Исключение
				КонецПопытки; 
				////////////////Расчет для Адмнинистраторов
				Если Эл.Должность=Справочники.Должности.НайтиПоНаименованию("Администратор",истина) Тогда 
					
					ПоказателиВесГраница=ПолучитьПоказателиВесГраница(Перечисления.ВидыПоказателей.АдминистраторВыполениеПлана);
					
					Попытка	
						Эл.ВыполнениеПланаKPI=Объект.ФактПоВыручке*100/Объект.ПланПоВыручке;
					Исключение	
					КонецПопытки;
					
					Попытка	
						Если Эл.ВыполнениеПланаKPI<ПоказателиВесГраница.Мин Тогда 
							Эл.ВыполнениеПланаKPIСУчетомГраниц=ПоказателиВесГраница.Мин;
						Иначе
							Если Эл.ВыполнениеПланаKPI>ПоказателиВесГраница.Мин И Эл.ВыполнениеПланаKPI<ПоказателиВесГраница.Макс Тогда
								Эл.ВыполнениеПланаKPIСУчетомГраниц=Эл.ВыполнениеПланаKPI;
							Иначе
								Эл.ВыполнениеПланаKPIСУчетомГраниц=ПоказателиВесГраница.Макс;
							КонецЕсли; 
						КонецЕсли;
					Исключение	
					КонецПопытки;
					Попытка
						Эл.ВыполнениеПланаKPIВзвешен=Окр(Эл.ВыполнениеПланаKPIСУчетомГраниц*ПоказателиВесГраница.Вес/100,2);				
					Исключение
					конецПопытки;
					Попытка
						Эл.КачественныйПоказательKPIВзвешен=ПолучитьВзвешенныйПоказательKPI(Эл.ЭффективностьДеятельности,Перечисления.ВидыПоказателей.АдминистраторЭффективностьДеятельности)
						+ПолучитьВзвешенныйПоказательKPI(Эл.РаботаСПрограммой,Перечисления.ВидыПоказателей.АдминистраторРаботаСПрограммой)
						+ПолучитьВзвешенныйПоказательKPI(Эл.Самостоятельность,Перечисления.ВидыПоказателей.АдминистраторСамостоятельностьОтветственность)
						+ПолучитьВзвешенныйПоказательKPI(Эл.Дисциплинированность,Перечисления.ВидыПоказателей.АдминистраторДисциплинированность);
						
						ПоказателиВесГраница=ПолучитьПоказателиВесГраница(Перечисления.ВидыПоказателей.АдминистраторКачественныйПоказатель);
						//взвешиваем  общий КачественныйПоказатель
						Эл.КачественныйПоказательKPIВзвешен=Окр(Эл.КачественныйПоказательKPIВзвешен*ПоказателиВесГраница.Вес/100,2);
						//проверяем границы
						Если Эл.КачественныйПоказательKPIВзвешен<ПоказателиВесГраница.Мин Тогда 
							Эл.КачественныйПоказательKPIВзвешен=ПоказателиВесГраница.Мин;
						Иначе
							Если Эл.КачественныйПоказательKPIВзвешен>ПоказателиВесГраница.Макс Тогда
								Эл.КачественныйПоказательKPIВзвешен=ПоказателиВесГраница.Макс;
							КонецЕсли; 
						КонецЕсли;
						
					Исключение
					КонецПопытки;
					
					Попытка	
						Эл.БазаKPI=СтоимостьЧасаKPI*Эл.ОтработаноВсего;
					Исключение
					КонецПопытки;
					
					Попытка	
						Эл.ПроцентKPI=Эл.ВыполнениеПланаKPIВзвешен+Эл.КачественныйПоказательKPIВзвешен;
					Исключение
					КонецПопытки;
					Попытка	
						Эл.ИтогоKPI=Окр(Эл.БазаKPI*Эл.ПроцентKPI/100,2);
					Исключение
					КонецПопытки;
				Иначе //Конец расчета Администратор   
					
					/////////////////////Расчет для Горничная
					Если Эл.Должность=Справочники.Должности.НайтиПоНаименованию("Горничная",истина) Тогда
						
						
						Итог=0;
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ПоказателиВесГраницаСрезПоследних.Показатель КАК Показатель,
						|	ПоказателиВесГраницаСрезПоследних.Вес КАК Вес,
						|	ПоказателиВесГраницаСрезПоследних.Минимум КАК Минимум,
						|	ПоказателиВесГраницаСрезПоследних.Максимум КАК Максимум
						|ИЗ
						|	РегистрСведений.ПоказателиВесГраница.СрезПоследних(&Дата, Показатель = &Показатель) КАК ПоказателиВесГраницаСрезПоследних";
						
						Запрос.УстановитьПараметр("Дата",Объект.ДатаПо);
						Запрос.УстановитьПараметр("Показатель",Перечисления.ВидыПоказателей.ГорничнаяКачественныйПоказатель);
						Вес1=0;
						РезультатЗапроса = Запрос.Выполнить();
						Если РезультатЗапроса.Пустой() Тогда
							Сообщить("Не найдены параметры в настройках ПоказателиВесГраница: Показатель="+Перечисления.ВидыПоказателей.ГорничнаяКачественныйПоказатель+" НаДату="+Объект.ДатаПо);
						Иначе	
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Вес1=ВыборкаДетальныеЗаписи.Вес;
							КонецЦикла;
						КонецЕсли;
						
						Если Эл.КачествоРаботыГорничная=Перечисления.ВидыОценок.Хорошая Тогда
							Итог=100;
						КонецЕсли;
						Если Эл.КачествоРаботыГорничная=Перечисления.ВидыОценок.Высокая Тогда
							Итог=150;
						КонецЕсли;  
						// Взвешиваем
						Попытка
						Эл.КачествоРаботыГорничнаяВзвешен=Окр(Итог*Вес1/100,2);
						Исключение
						КонецПопытки;
						Попытка	
							Эл.БазаKPI=СтоимостьЧасаKPI*Эл.ОтработаноВсего;
						Исключение
						КонецПопытки;
						
						Попытка	
							Эл.ПроцентKPI=Эл.КачествоРаботыГорничнаяВзвешен;
						Исключение
						КонецПопытки;
						Попытка	
							Эл.ИтогоKPI=Окр(Эл.БазаKPI*Эл.ПроцентKPI/100,2);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере 
Функция ПолучитьВзвешенныйПоказательKPI(Оценка,Показатель)
	Итог=0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиВесГраницаСрезПоследних.Показатель КАК Показатель,
	|	ПоказателиВесГраницаСрезПоследних.Вес КАК Вес,
	|	ПоказателиВесГраницаСрезПоследних.Минимум КАК Минимум,
	|	ПоказателиВесГраницаСрезПоследних.Максимум КАК Максимум
	|ИЗ
	|	РегистрСведений.ПоказателиВесГраница.СрезПоследних(&Дата, Показатель = &Показатель) КАК ПоказателиВесГраницаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",Объект.ДатаПо);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Вес1=0;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не найдены параметры в настройках ПоказателиВесГраница: Показатель="+Показатель+" НаДату="+Объект.ДатаПо);
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Вес1=ВыборкаДетальныеЗаписи.Вес;
		КонецЦикла;
	КонецЕсли;
	Если Оценка=Перечисления.ВидыОценок.Низкая Тогда
		Итог=0;
	КонецЕсли;
	Если Оценка=Перечисления.ВидыОценок.Удовлетворительная Тогда
		Итог=Окр(50*Вес1/100,2);
	КонецЕсли;
	Если Оценка=Перечисления.ВидыОценок.Хорошая Тогда
		Итог=Окр(100*Вес1/100,2);
	КонецЕсли;
	Если Оценка=Перечисления.ВидыОценок.Высокая Тогда
		Итог=Окр(125*Вес1/100,2);
	КонецЕсли;
	Возврат Итог;
КонецФункции
&НаСервере 
Функция ПолучитьПоказателиВесГраница(Показатель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиВесГраницаСрезПоследних.Показатель КАК Показатель,
	|	ПоказателиВесГраницаСрезПоследних.Вес КАК Вес,
	|	ПоказателиВесГраницаСрезПоследних.Минимум КАК Минимум,
	|	ПоказателиВесГраницаСрезПоследних.Максимум КАК Максимум
	|ИЗ
	|	РегистрСведений.ПоказателиВесГраница.СрезПоследних(&Дата, Показатель = &Показатель) КАК ПоказателиВесГраницаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",Объект.ДатаПо);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Вес1=0;
	ВесМин=0;
	ВесМакс=0;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не найдены параметры в настройках ПоказателиВесГраница: Показатель="+Показатель+" НаДату="+Объект.ДатаПо);
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Вес1=ВыборкаДетальныеЗаписи.Вес;
			ВесМин=ВыборкаДетальныеЗаписи.Минимум;
			ВесМакс=ВыборкаДетальныеЗаписи.Максимуму;
		КонецЦикла;
	КонецЕсли;
	Показатели=Новый Структура;
	Показатели.Вставить("Вес",Вес1);
	Показатели.Вставить("Мин",ВесМин);
	Показатели.Вставить("Макс",ВесМакс);
	Возврат Показатели;
КонецФункции
&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура(
	"ЗакрыватьПриВыборе,МножественныйВыбор",
	Ложь,
	Истина
	);
	ОткрытьФорму(
	"Справочник.Сотрудники.ФормаВыбора",
	ПараметрыФормы,
	Элементы.ТЧРасчет
	);
КонецПроцедуры

&НаКлиенте
Процедура ТЗОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьТЗ(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДанные(Команда)
	// Вставить содержимое обработчика.
	ЗаполнитьТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ТЧРасчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ЗаполнитьТЗ(ВыбранноеЗначение);
	
КонецПроцедуры
&НаСервере 
Функция ЕстьСотрудникЧасы(Сотрудник)
	Проверка=ложь;
	ДокументыТабеля=ПолучитьДанныеИзТабеля();
	Регистраторы=ДокументыТабеля.ВыгрузитьКолонку("Ссылка");
	ВидыВремени=Новый Массив;
	ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
	ВидыВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы"));
	
	запрос=новый запрос;
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.УстановитьПараметр("ВидыВремени",ВидыВремени);
	запрос.УстановитьПараметр("Регистраторы",Регистраторы);
	
	
	запрос.Текст="ВЫБРАТЬ
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы КАК Часы,
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаРабочегоВремениСотрудников
	|ГДЕ
	|	ДанныеТабельногоУчетаРабочегоВремениСотрудников.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Регистратор В(&Регистраторы)
	|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени В(&ВидыВремени)
	|	И ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник В(&Сотрудник)";
	ВремяПоСотр=запрос.Выполнить().Выгрузить();
	
	Возврат ВремяПоСотр;
конецФункции
Функция ПроверитьНаУволенных(Сотрудник)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	
	запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоАптекам.Сотрудник КАК Сотрудник,
	|	ДанныеПоАптекам.Уволенная КАК Уволенная,
	|	ДанныеПоАптекам.ЛичнаяВыручкаДТМ КАК ЛичнаяВыручкаДТМ,
	|	ДанныеПоАптекам.ЛичнаяВыручкаНеДТМ КАК ЛичнаяВыручкаНеДТМ,
	|	ДанныеПоАптекам.БонусЗаСовмещение КАК БонусЗаСовмещение,
	|	ДанныеПоАптекам.БонусЗаЛичнуюВыручку КАК БонусЗаЛичнуюВыручку,
	|	ДанныеПоАптекам.БонусПоДМ КАК БонусПоДМ,
	|	ДанныеПоАптекам.БонусМУ КАК БонусМУ,
	|	ДанныеПоАптекам.БонусСроковые КАК БонусСроковые,
	|	ДанныеПоАптекам.БонусЗаОценку КАК БонусЗаОценку,
	|	ДанныеПоАптекам.ВремяНочь КАК ВремяНочь,
	|	ДанныеПоАптекам.ВремяДень КАК ВремяДень,
	|	ДанныеПоАптекам.ПодразделениеРаботы КАК ПодразделениеРаботы,
	|	ДанныеПоАптекам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоАптекам.ОценкаТекст КАК ОценкаТекст,
	|	ДанныеПоАптекам.Среднечасовое1 КАК Среднечасовое1,
	|	ДанныеПоАптекам.Среднечасовое2 КАК Среднечасовое2,
	|	ДанныеПоАптекам.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ДанныеПоАптекам.ФактПродажМУЗаМесяц КАК ФактПродажМУЗаМесяц,
	|	ДанныеПоАптекам.ФактПродажМУЗаЧас КАК ФактПродажМУЗаЧас,
	|	ДанныеПоАптекам.ПланМУСреднечасовой КАК ПланМУСреднечасовой,
	|	ДанныеПоАптекам.ПоказательKPI1 КАК ПоказательKPI1,
	|	ДанныеПоАптекам.ПоказательKPI2 КАК ПоказательKPI2,
	|	ДанныеПоАптекам.ПремияKPI КАК ПремияKPI
	|ИЗ
	|	РегистрСведений.ДанныеПоАптекам КАК ДанныеПоАптекам
	|ГДЕ
	|	ДанныеПоАптекам.Сотрудник = &Сотрудник
	|	И ДанныеПоАптекам.ДатаС >= &ДатаС
	|	И ДанныеПоАптекам.ДатаПо <= &ДатаПо";
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
конецфункции
Функция ПроверитьПодрАкция(Аптека)
	запрос=новый запрос;
	запрос.УстановитьПараметр("Дата",Объект.ДатаС);
	запрос.УстановитьПараметр("Аптека",Аптека);
	запрос.Текст="ВЫБРАТЬ
	|	АкцииПоАптекамСрезПоследних.Акция КАК Акция
	|ИЗ
	|	РегистрСведений.АкцииПоАптекам.СрезПоследних(&Дата, Аптека = &Аптека) КАК АкцииПоАптекамСрезПоследних";
	Результат=запрос.Выполнить().Выгрузить();
	Если Результат.Количество()>0 тогда
		Акция=Результат[0].Акция;
	иначе
		Акция=Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
	конецесли;
	Возврат Акция;
конецфункции
Процедура ЗаполнитьТЧПоТабелю()
	Объект.ТЧРасчет.Очистить();
	ТолькоРазрешенные = Истина;
	РезПоСотр=ПолучитьДанныеИзТабеля();
	РезПоСотр.Свернуть("Сотрудник"); 
	
	
	Для Каждого ВыбранныйЭлемент Из РезПоСотр Цикл
		Проверить=Истина;
		Проверка=ЕстьСотрудникЧасы(ВыбранныйЭлемент.Сотрудник);
		Если Проверка.Количество()=0 тогда
			Продолжить;
			
		конецесли;
		
		Для каждого ДатаПроверки из Проверка цикл
			КадровыеДанные = "Должность,РазрядКатегория";
			
			МассивСотрудников = Новый Массив;
			
			МассивСотрудников.Добавить(ВыбранныйЭлемент.Сотрудник);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаПроверки.Период);
			
			Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
				Должность = Строка.Должность;
				
			КонецЦикла;
			
			РазрядКатегория=Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
			МассивСотрудников = Новый Массив;
			
			МассивСотрудников.Добавить(ВыбранныйЭлемент.Сотрудник.ГоловнойСотрудник);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаПроверки.Период);
			
			Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
				РазрядКатегория=Строка.Разрядкатегория;
			КонецЦикла; 
			
			МассивСотрудников1 = Новый Массив;
			
			МассивСотрудников1.Добавить(ВыбранныйЭлемент.Сотрудник.ГоловнойСотрудник);
			
			КадровыеДанные = "Подразделение"; 
			
			КадровыеДанныеСотрудников1 = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников1, КадровыеДанные, ДатаПроверки.Период);
			Для Каждого Строка Из КадровыеДанныеСотрудников1 Цикл
				ПодразделениеСОтрудника = Строка.Подразделение;
			КонецЦикла;
			//Добавили продаваец-концсультант
			//Если Должность=Справочники.Должности.НайтиПоНаименованию("Фармацевт") или Должность=Справочники.Должности.НайтиПоНаименованию("Старший фармацевт") тогда
			Если Должность=Справочники.Должности.НайтиПоНаименованию("Администратор") или 
				Должность=Справочники.Должности.НайтиПоНаименованию("Горничная") Тогда
				НоваяСтрока = Объект.ТЧРасчет.Добавить();
				НоваяСтрока.Сотрудник = ВыбранныйЭлемент.Сотрудник;
				НоваяСтрока.РазрядКатегория=РазрядКатегория;
				НоваяСтрока.ФизическоеЛицо = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо;
				НоваяСтрока.ИНН = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо.ИНН;
				НоваяСтрока.ТабНомер = ВыбранныйЭлемент.Сотрудник.Код;
				НоваяСтрока.Должность = Должность;
				НоваяСтрока.ПодразделениеСотрудника=ПодразделениеСотрудника; 
				//Область=НоваяСтрока.Область(1,1,1,2);
				//Область.ЦветФона = Новый Цвет(255, 179, 242);
				//Если ПодразделениеСотрудника=Объект.Подразделение тогда
				//	ПроверкаАкции=ПроверитьПодрАкция(ПодразделениеСотрудника) ; 
				//	НоваяСтрока.РазрядПодразделение=ПроверкаАкции;
				//иначе
				//	//LMAL_19-01-2023_н добавил точное совпадение
				//	//НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("основная");
				//	НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("Аптека основная",Истина);
				//	//LMAL_19-01-2023_к
				//	
				//конецесли;
				//ПроверкаНаУволенную
				ПроверкаУв=ПроверитьНаУволенных(ВыбранныйЭлемент.Сотрудник);
				Если ПроверкаУв.Количество()>0 тогда 
					НоваяСтрока.Уволенная = истина;
					НоваяСтрока.ЗапретРедактирования=истина; 
					Для каждого Эл из ПроверкаУв цикл
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Эл);
					конеццикла;
				конецесли;
				
				Прервать;
			конецесли;
		конеццикла;
	КонецЦикла;
	Объект.ТЧРасчет.Сортировать("Должность,Сотрудник");
конецпроцедуры
&НаКлиенте
Процедура ЗаполнитьПоДаннымТабеля(Команда)
	// Вставить содержимое обработчика.
	ЗаполнитьТЧПоТабелю();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧРасчетЛичнаяВыручкаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
&НаСервере
Функция ПроверкаДоступности()
	//Отказпросмотра=ложь;
	//ТекущийПользователь=Пользователи.ТекущийПользователь();
	//Запрос = Новый Запрос;
	//запрос.УстановитьПараметр("Пользователь",ТекущийПользователь);
	//запрос.УстановитьПараметр("Роль","СтатусЗавершено");
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	1 
	//|ИЗ
	//|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	//|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	//|ГДЕ
	//|	ПрофилиГруппДоступаРоли.Роль.Имя = &Роль
	//|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	//
	//Результат=запрос.Выполнить().Выгрузить();
	//Если Результат.Количество()=0 и Объект.Статус=Перечисления.ВидыСтатусов.Завершено тогда
	//	ОтказПросмотра=истина;	
	//конецесли;
	//Возврат ОтказПросмотра;
	Возврат НЕ (РольДоступна("СтатусЗавершено") или РольДоступна("АдминистраторСистемы")) И Объект.Статус=Перечисления.ВидыСтатусов.Завершено;
	
конецфункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	ЗаполнитьПодразделениеОрганизации();
		ОтказПросмотра=ПроверкаДоступности();
	Если ОтказПросмотра=истина тогда
		//LMAL_24-01-2023_н
		//ЭтаФорма.Доступность=Ложь;
		Элементы.ТЧРасчет.ТолькоПросмотр=Истина;
		Элементы.Номер.ТолькоПросмотр=Истина;
		Элементы.Группа1.ТолькоПросмотр=Истина;
		Элементы.Группа2.ТолькоПросмотр=Истина;
		Элементы.Группа4.ТолькоПросмотр=Истина;
		Элементы.ТЧРасчетЗаполнитьПоДаннымТабеля.Доступность=Ложь;
		Элементы.ТЧРасчетЗаполнитьПоУволенным.Доступность=Ложь;
		Элементы.ТЧРасчетРассчитатьДанные.Доступность=Ложь;
	Иначе
		Элементы.ТЧРасчет.ТолькоПросмотр=Ложь;
		Элементы.Номер.ТолькоПросмотр=Ложь;
		Элементы.Группа1.ТолькоПросмотр=Ложь;
		Элементы.Группа2.ТолькоПросмотр=Ложь;
		Элементы.Группа4.ТолькоПросмотр=Ложь;
		Элементы.ТЧРасчетЗаполнитьПоДаннымТабеля.Доступность=Истина;
		Элементы.ТЧРасчетЗаполнитьПоУволенным.Доступность=Истина;
		Элементы.ТЧРасчетРассчитатьДанные.Доступность=Истина;
		//LMAL_24-01-2023_к
	конецесли;
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПодразделениеОрганизации();
	Объект.Подразделение=Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Отель",истина);
КонецПроцедуры
Процедура ОбработатьИзменениеМесяцДатыНаСервере()
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Период", НачалоДня(Объект.МесяцДаты));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	ОбработкаДатыВыбора.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцДаты", "МесяцДатыСтрокой", Модифицированность);
	ОбработатьИзменениеМесяцДатыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцДатыСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОбработкаДатыВыбора.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцДаты", "МесяцДатыСтрокой", , Оповещение);
	
	
КонецПроцедуры 

&НаКлиенте
Процедура МесяцДатыСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеВыбрано Тогда 
		ОбработатьИзменениеМесяцДатыНаСервере();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбработкаДатыВыбора.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцДаты", "МесяцДатыСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбработкаДатыВыбора.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОбработкаДатыВыбора.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры
&НаСервере 
Функция ПроверкаСотрудникаНаПросчетКакУволенного(Сотрудник) 
	запрос=новый запрос;
	запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.УстановитьПараметр("ДатаС",Объект.ДатаС);
	запрос.УстановитьПараметр("ДатаПо",Объект.ДатаПо);
	запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоАптекам.Подразделение КАК Подразделение,
	|	ДанныеПоАптекам.Сотрудник КАК Сотрудник,
	|	ДанныеПоАптекам.ДатаПо КАК ДатаПо,
	|	ДанныеПоАптекам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоАптекам.ДатаС КАК ДатаС,
	|	ДанныеПоАптекам.ПодразделениеРаботы КАК ПодразделениеРаботы,
	|	ДанныеПоАптекам.Должность КАК Должность,
	|	ДанныеПоАптекам.ВремяДень КАК ВремяДень,
	|	ДанныеПоАптекам.ВремяНочь КАК ВремяНочь,
	|	ДанныеПоАптекам.БонусЗаОценку КАК БонусЗаОценку,
	|	ДанныеПоАптекам.БонусСроковые КАК БонусСроковые,
	|	ДанныеПоАптекам.БонусМУ КАК БонусМУ,
	|	ДанныеПоАптекам.БонусПоДМ КАК БонусПоДМ,
	|	ДанныеПоАптекам.БонусЗаЛичнуюВыручку КАК БонусЗаЛичнуюВыручку,
	|	ДанныеПоАптекам.БонусЗаСовмещение КАК БонусЗаСовмещение,
	|	ДанныеПоАптекам.Статус КАК Статус,
	|	ДанныеПоАптекам.ЛичнаяВыручкаНеДТМ КАК ЛичнаяВыручкаНеДТМ,
	|	ДанныеПоАптекам.ЛичнаяВыручкаДТМ КАК ЛичнаяВыручкаДТМ,
	|	ДанныеПоАптекам.Уволенная КАК Уволенная
	|ИЗ
	|	РегистрСведений.ДанныеПоАптекам КАК ДанныеПоАптекам
	|ГДЕ
	|	ДанныеПоАптекам.Сотрудник = &Сотрудник
	|	И ДанныеПоАптекам.ДатаС МЕЖДУ &ДатаС И &ДатаПо
	|	И ДанныеПоАптекам.ДатаПо МЕЖДУ &ДатаС И &ДатаПо";
	Результат=запрос.Выполнить().Выгрузить();
	Возврат Результат;
конецфункции
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	МесяцНачисленияСтрокой=Формат(ТекущаяДата(), "ДФ='ММММ гггг'");;
	
	
	Объект.ТЧРасчет.Сортировать("Должность,Сотрудник");
	
	//Красим поля Администратор
	УсловноеОформление.Элементы.Очистить();
	Элемент = УсловноеОформление.Элементы.Добавить();
    
	ПолеЭлемента1 = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента1.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТЧРасчетЭффективностьДеятельности.Имя);
    ПолеЭлемента2 = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента2.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТЧРасчетРаботаСПрограммой.Имя);
	ПолеЭлемента3 = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента3.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТЧРасчетСамостоятельность.Имя);
    ПолеЭлемента4 = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента4.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТЧРасчетДисциплинированность.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЧРасчет.Должность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Должности.НайтиПоНаименованию("Администратор",истина);

	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(255,255,204));
	//Красим поля Горничная
	
	Элемент = УсловноеОформление.Элементы.Добавить();
    
	ПолеЭлемента1 = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента1.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТЧРасчетКачествоРаботыГорничная.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЧРасчет.Должность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Должности.НайтиПоНаименованию("Горничная",истина);
    Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(255,255,204));
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСписокУволенных()
	запрос=новый запрос;
	запрос.УстановитьПараметр("ДатаС",ДатаУвС);
	запрос.УстановитьПараметр("ДатаПо",ДатаУвПо);
	запрос.УстановитьПараметр("истина",истина);
	запрос.Текст=                 "ВЫБРАТЬ
	|	Увольнение.Сотрудник КАК Сотрудник,
	|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Проведен = &Истина
	|	И Увольнение.ДатаУвольнения МЕЖДУ &ДатаС И &ДатаПо";
	Результат=запрос.Выполнить().Выгрузить(); 
	МасСотр=Новый Массив;
	Для каждого Эл из Результат цикл
		МасСотр.Добавить(Эл.Сотрудник);
	конеццикла;
	Объект.ТЧРасчет.Очистить();
	ТолькоРазрешенные = Истина;
	РезПоСотр=ПолучитьДанныеИзТабеляСотр(МасСотр);
	РезПоСотр.Свернуть("Сотрудник"); 
	
	
	Для Каждого ВыбранныйЭлемент Из РезПоСотр Цикл
		Проверить=Истина;
		Проверка=ЕстьСотрудникЧасы(ВыбранныйЭлемент.Сотрудник);
		Если Проверка.Количество()=0 тогда
			Продолжить;
			
		конецесли;
		
		Для каждого ДатаПроверки из Проверка цикл
			КадровыеДанные = "Должность,РазрядКатегория";
			
			МассивСотрудников = Новый Массив;
			
			МассивСотрудников.Добавить(ВыбранныйЭлемент.Сотрудник);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников, КадровыеДанные, ДатаПроверки.Период);
			//LMAL_Н 03-05-2023
			Для Каждого Строка Из КадровыеДанныеСотрудников Цикл
				Должность = Строка.Должность; 
				//РазрядКатегория=Строка.Разрядкатегория;
			КонецЦикла;
			РазрядКатегория=Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
			
			МассивСотрудников1 = Новый Массив;
			
			МассивСотрудников1.Добавить(ВыбранныйЭлемент.Сотрудник.ГоловнойСотрудник);
			
			КадровыеДанные = "Подразделение,РазрядКатегория";
			КадровыеДанныеСотрудников1 = КадровыйУчет.КадровыеДанныеСотрудников(
			
			ТолькоРазрешенные, МассивСотрудников1, КадровыеДанные, ДатаПроверки.Период);
			Для Каждого Строка Из КадровыеДанныеСотрудников1 Цикл
				ПодразделениеСОтрудника = Строка.Подразделение;
				РазрядКатегория=Строка.Разрядкатегория;
			КонецЦикла;
			//LMAL_К
			//Если Должность=Справочники.Должности.НайтиПоНаименованию("Фармацевт") или Должность=Справочники.Должности.НайтиПоНаименованию("Старший фармацевт") тогда
			Если Должность=Справочники.Должности.НайтиПоНаименованию("Администратор") или 
				Должность=Справочники.Должности.НайтиПоНаименованию("Горничная") Тогда
				НоваяСтрока = Объект.ТЧРасчет.Добавить();
				НоваяСтрока.Сотрудник = ВыбранныйЭлемент.Сотрудник;
				НоваяСтрока.РазрядКатегория=РазрядКатегория;
				НоваяСтрока.ФизическоеЛицо = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо;
				НоваяСтрока.ИНН = ВыбранныйЭлемент.Сотрудник.ФизическоеЛицо.ИНН;
				НоваяСтрока.ТабНомер = ВыбранныйЭлемент.Сотрудник.Код;
				НоваяСтрока.Должность = Должность;
				НоваяСтрока.ПодразделениеСотрудника=ПодразделениеСотрудника; 
				//Если ПодразделениеСотрудника=Объект.Подразделение тогда
				//	ПроверкаАкции=ПроверитьПодрАкция(ПодразделениеСотрудника) ; 
				//	НоваяСтрока.РазрядПодразделение=ПроверкаАкции;
				//иначе
				//	//LMAL_19-01-2023_н добавил точное совпадение
				//	НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("Аптека основная",Истина);  
				//	//НоваяСтрока.РазрядПодразделение=Справочники.РазрядыКатегорииДолжностей.НайтиПоНаименованию("основная");
				//	//LMAL_19-01-2023_к
				//	
				//конецесли;
				НоваяСтрока.ПервоначальныйРасчетПоУволенным=Истина; 
				// Если Уволенные=Истина тогда
				// НоваяСтрока.Уволенная=истина;
				//конецесли;
				Прервать;
			конецесли;
		конеццикла;
	КонецЦикла;	
	
	
конецпроцедуры
&НаКлиенте
Процедура ЗаполнитьПоУволенным(Команда)
	// Вставить содержимое обработчика.
	Значение=ОткрытьФормуМодально("Документ.ВводДанныхОтель.Форма.Форма"); 
	ДатаУвС=Значение.Параметр1;
	ДатаУвПо=Значение.Параметр2;
	ЗаполнитьСписокУволенных();
КонецПроцедуры

&НаКлиенте
Процедура ТЧРасчетПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Вставить содержимое обработчика
КонецПроцедуры




